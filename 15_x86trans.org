# -*- Org -*-
# 
# Copyright (c) 2021, Hiroyuki Ohsaki.
# All rights reserved.
# 

# This document is licensed under a Creative Commons
# Attribution-NonCommercial-ShareAlike 4.0 International License (CC
# BY-NC-SA 4.0).

# This document is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Creative Commons License for more details.

# You should have received a copy of the license along with this work.
# If not, see <http://creativecommons.org/licenses/by-nc-sa/4.0/>.

* x86 命令セット (データ転送)
<<ch:x86trans>>

本章では、
データ転送命令を説明していきます。

** データ転送命令
<<sec:x86trans/transfer>>

データ転送命令とは、
汎用レジスタ間でデータをコピーしたり、
メモリと汎用レジスタ (またはセグメント・レジスタ) の間でデータをコピーしたり、
*即値 (immediate value)* をレジスタやメモリに書き込むための命令です。
スタックへのプッシュやポップもデータ転送命令に含まれます。

#+begin_note
例えば、
\inst{movl $123, %eax} は 10 進数の 123 を、
レジスタ EAX に格納することを意味します。
このときの ~$123~ は、
アドレスの 123 番地ではなく、
123 という「値そのもの」を意味します。
「値そのもの」のことを *即値 (immediate value)* と呼びます。
値が差す先にあるものではなく、
値が即時に表すものですので、
英語で immediate value と呼ばれます。
#+end_note

IA-32 アーキテクチャのデータ転送命令は、
以下の 32 種類です (文献 \cite{Intel04:IA32J-1} から抜粋)。

#+attr_latex: :environment longtable :align lp{30zw} :float t
| MOV           | Move data between general-purpose registers; move data between memory and general-purpose or segment registers; move immediates to generalpurpose registers |
|               | 汎用レジスタ間でデータを転送、メモリと汎用レジスタ / セグメント・レジスタ間でデータを転送、即値を汎用レジスタに転送                                         |
| CMOVE/CMOVZ   | Conditional move if equal/Conditional move if zero                                                                                                          |
|               | 等しい場合は条件付き転送 / ゼロの場合は条件付き転送                                                                                                         |
| CMOVNE/CMOVNZ | Conditional move if not equal/Conditional move if not zero                                                                                                  |
|               | 等しくない場合は条件付き転送 / ゼロでない場合は条件付き転送                                                                                                 |
| CMOVA/CMOVNBE | Conditional move if above/Conditional move if not below or equa                                                                                             |
|               | より大きい場合は条件付き転送 / より小さくなく等しくない場合は条件付き転送                                                                                   |
| CMOVAE/CMOVNB | Conditional move if above or equal/Conditional move if not below                                                                                            |
|               | より大きいか等しい場合は条件付き転送 / より小さくない場合は条件付き転送                                                                                     |
| CMOVB/CMOVNAE | Conditional move if below/Conditional move if not above or equal                                                                                            |
|               | より小さい場合は条件付き転送 / より大きくなく等しくない場合は条件付き転送                                                                                   |
| CMOVBE/CMOVNA | Conditional move if below or equal/Conditional move if not above                                                                                            |
|               | より小さいか等しい場合は条件付き転送 / より大きくない場合は条件付き転送                                                                                     |
| CMOVG/CMOVNLE | Conditional move if greater/Conditional move if not less or equal                                                                                           |
|               | より大きい場合は条件付き転送 / より小さくなく等しくない場合は条件付き転送                                                                                   |
| CMOVGE/CMOVNL | Conditional move if greater or equal/Conditional move if not less                                                                                           |
|               | より大きいか等しい場合は条件付き転送 / より小さくない場合は条件付き転送                                                                                     |
| CMOVL/CMOVNGE | Conditional move if less/Conditional move if not greater or equal                                                                                           |
|               | より小さい場合は条件付き転送 / より大きくなく等しくない場合は条件付き転送                                                                                   |
| CMOVLE/CMOVNG | Conditional move if less or equal/Conditional move ifnot greater                                                                                            |
|               | より小さいか等しい場合は条件付き転送 / より大きくない場合は条件付き転送                                                                                     |
| CMOVC         | Conditional move if carry                                                                                                                                   |
|               | キャリーありの場合は条件付き転送                                                                                                                            |
| CMOVNC        | Conditional move if not carry                                                                                                                               |
|               | キャリーなしの場合は条件付き転送                                                                                                                            |
| CMOVO         | Conditional move if overflow                                                                                                                                |
|               | オーバーフローありの場合は条件付き転送                                                                                                                      |
| CMOVNO        | Conditional move if not overflow                                                                                                                            |
|               | オーバーフローなしの場合は条件付き転送                                                                                                                      |
| CMOVS         | Conditional move if sign（negative）                                                                                                                        |
|               | 符号付きの場合（負の場合）は条件付き転送                                                                                                                    |
| CMOVNS        | Conditional move if not sign（non-negative）                                                                                                                |
|               | 符号なしの場合（負でない場合）は条件付き転送                                                                                                                |
| CMOVP/CMOVPE  | Conditional move if parity/Conditional move if parity even                                                                                                  |
|               | パリティありの場合は条件付き転送 / 偶数パリティの場合は条件付き転送                                                                                         |
| CMOVNP/CMOVPO | Conditional move if not parity/Conditional move if parity odd                                                                                               |
|               | パリティなしの場合は条件付き転送 / 奇数パリティの場合は条件付き転送                                                                                         |
| XCHG          | Exchange                                                                                                                                                    |
|               | 交換                                                                                                                                                        |
| BSWAP         | Byte swap                                                                                                                                                   |
|               | バイト・スワップ                                                                                                                                            |
| XADD          | Exchange and add                                                                                                                                            |
|               | 交換して加算                                                                                                                                                |
| CMPXCHG       | Compare and exchange                                                                                                                                        |
|               | 比較して交換                                                                                                                                                |
| CMPXCHG8B     | Compare and exchange 8 bytes                                                                                                                                |
|               | 比較して 8 バイトを交換                                                                                                                                     |
| PUSH          | Push onto stack                                                                                                                                             |
|               | スタックにプッシュ                                                                                                                                          |
| POP           | Pop off of stack                                                                                                                                            |
|               | スタックからポップ                                                                                                                                          |
| PUSHA/PUSHAD  | Push general-purpose registers onto stack                                                                                                                   |
|               | 汎用レジスタをスタックにプッシュ                                                                                                                            |
| POPA/POPAD    | Pop general-purpose registers from stack                                                                                                                    |
|               | スタックから汎用レジスタをポップ                                                                                                                            |
| CWD/CDQ       | Convert word to doubleword/Convert doubleword to quadword                                                                                                   |
|               | ワードをダブルワードに変換 / ダブルワードをクワッドワードに変換                                                                                             |
| CBW/CWDE      | Convert byte to word/Convert word to doubleword in EAX register                                                                                             |
|               | バイトをワードに変換 /EAX レジスタ内でワードをダブルワードに変換                                                                                            |
| MOVSX         | Move and sign extend                                                                                                                                        |
|               | 転送して符号で拡張                                                                                                                                          |
| MOVZX         | Move and zero extend                                                                                                                                        |
|               | 転送してゼロで拡張                                                                                                                                          |

データ転送命令だけで 32 種類もあって、
再びくじけそうになるかもしれません。
しかし、
「CMOV なんとか」という命令は単なるバリエーション違いなので、
実質それほど種類があるわけではありません。
これらの中で特に重要なのは
- MOV (move)
- MOVZX/MOVSX (move with zero/sign-extend)
- XCHG (exchange)
- PUSH (push)
- POP (pop)
の 5 命令です。

それぞれの命令を順番に説明します。
以下、
命令のニーモニックの後に [3-123] などの表記があります。
これは、
インテルのソフトウェア開発マニュアル \cite{Intel04:IA32J-2A,Intel04:IA32J-2B} において、
その命令のリファレンスが掲載されているページの番号を意味します。

*** 汎用データ転送命令: MOV (Move)

*MOV --- Move* [3-489]

MOVE 命令は、
オペランドを 2 つ取り、
出所オペランドを宛先オペランドにコピーします。
IA-32 アーキテクチャで最もよく使われる命令であるとともに、
IA-32 アーキテクチャの発展の歴史を感じられるような複雑な命令です。

MOV 命令の出所オペランドには、
即値、
汎用レジスタ、
セグメントレジスタ、
メモリロケーションを指定できます。
また、
MOV 命令の宛先オペランドには、
汎用レジスタ、
セグメントレジスタ、
メモリロケーションを指定できます。

[[sec:mem/cpu-model]] 節で導入した CPU の抽象モデルで説明すると、
MOV 命令では以下の処理が可能です。
以下では、
即値を $c$、
メモリロケーションを $m$ と表記します。
*メモリロケーション* は、
定数 (メモリのアドレス) やレジスタの値によって表現します。
*間接メモリ参照* ([[sec:gas/ia32-specific]] 節) で表現することもできます。

- 即値をレジスタにコピー
  #+begin_quote
  \r{i}	← $c$
  #+end_quote

- レジスタの値を別のレジスタにコピー
  #+begin_quote
  \r{i}	← \r{j}
  #+end_quote

- メモリの値をレジスタにコピー
  #+begin_quote
  \r{i}	← [$m$]
  #+end_quote

- 即値をメモリに格納
  #+begin_quote
  [$m$] ← $c$
  #+end_quote

- レジスタの値をメモリに格納
  #+begin_quote
  [$m$] ← \r{i}
  #+end_quote

このように、
フォン・ノイマン型コンピュータとして普通にできそうな、
レジスタやメモリ間のデータ転送が行えます。

利用できるレジスタの組み合わせに制限があったり、
転送するデータの大きさが 8 ビット (バイト)、
16 ビット (ワード)、
32 ビット (ダブルワード) だったりとさまざまで、
一見すると非常に複雑ですが、
基本的には上記の 5 パターンのデータ転送ができるだけです。

逆に言えば、
MOV 命令では、
以下のようなデータ転送はできません。

- レジスタの値を即値にコピー (できない)
  #+begin_quote
  $c$ ← \r{i}
  #+end_quote

- メモリの値を即値にコピー (できない)
  #+begin_quote
  $c$ ← [$m$]
  #+end_quote

- メモリの値をメモリに格納 (できない)
  #+begin_quote
  [$m_1$] ← [$m_2$]
  #+end_quote
  ここで $m_1$ および $m_2$ はともにメモリアドレスです。

「即値←レジスタ」と「即値←メモリの値」は、
即値に値を格納できないため、
これらの操作は行えなくて当然です。

「メモリ←メモリの値」は技術的には可能なのでしょうが、
MOV 命令ではメモリからメモリへのコピーはできません。
IA-32 アーキテクチャくらい複雑で高機能な CPU ならできそうなものですが、
さすがの IA-32 アーキテクチャでも不可能です。
メモリからメモリにデータをコピーする場合は、
いったんレジスタを経由して
#+begin_quote
\r{i} ← [$m_2$] \\
\relax [$m_1$] ← \r{i}
#+end_quote
のように 2 命令に分けて実行する必要があります。

IA-32 アーキテクチャの命令セットが複雑である理由の 1 つは、
[[sec:gas/ia32-specific]] 節で説明した、
間接メモリ参照です。

間接メモリ参照とは、
参照するメモリのアドレスを
\begin{align}
  アドレス = ベースレジスタの値 + インデックスレジスタの値 \times 倍率 + 変位
\end{align}
のように指定することでした。
間接メモリ参照を CPU の抽象モデルで説明すると、
メモリアドレス $m$ を単に数値で指定できるだけでなく、
ベースレジスタ\r{i},
インデックスレジスタ \r{j},
倍率 $s$,
変位 $d$ を使用して、
\begin{align}
  m = \r{i} + \r{j} \times s + d
\end{align}
のようにも指定できることを意味します。

したがって、
「レジスタ←メモリ上の値」を例にすると、
単純な
#+begin_quote
\r{i} ← [$m$]
#+end_quote
というデータ転送ができるだけでなく、
#+begin_quote
\r{i} ← [$\r{j} + \r{k} \times s + d$]
#+end_quote
のような複雑なデータ転送も *1 命令で* できます。

なお、
MOV 命令の実行によってフラグレジスタ (EFLAGS) の値は変化しません。

これらを頭に入れて、
MOV 命令のオペコード表 (文献 \cite{Intel04:IA32J-2A} より抜粋) を見てみましょう。
この表はインテルのマニュアルを抜粋したものであるため、
本書で扱う AT&T 構文ではなく、
インテル構文 (MOV 宛先オペランド, 出所オペランドの順) で書かれていることに注意してください。

#+attr_latex: :environment maxtabular
| オペコード | 命令              | 説明                                                     |
|------------+-------------------+----------------------------------------------------------|
| 88 /r      | MOV r/m8, r8      | r8 をr/m8 に転送する。                                   |
| 89 /r      | MOV r/m16, r16    | r16 をr/m16 に転送する。                                 |
| 89 /r      | MOV r/m32, r32    | r32 をr/m32 に転送する。                                 |
| 8A /r      | MOV r8, r/m8      | r/m8 をr8 に転送する。                                   |
| 8B /r      | MOV r16, r/m16    | r/m16 をr16 に転送する。                                 |
| 8B /r      | MOV r32, r/m32    | r/m32 をr32 に転送する。                                 |
| 8C /r      | MOV r/m16, Sreg** | セグメント・レジスタをr/m16 に転送する。                 |
| 8E /r      | MOV Sreg, r/m16** | r/m16 をセグメント・レジスタに転送する。                 |
| A0         | MOV AL, moffs8*   | （セグメント: オフセット）のバイトをAL に転送する。      |
| A1         | MOV AX, moffs16*  | （セグメント: オフセット）のワードをAX に転送する。      |
| A1         | MOV EAX, moffs32* | （セグメント:オフセット）のダブルワードをEAXに転送する。 |
| A2         | MOV moffs8*, AL   | AL を（セグメント: オフセット）に転送する。              |
| A3         | MOV moffs16*, AX  | AX を（セグメント: オフセット）に転送する。              |
| A3         | MOV moffs32*, EAX | EAX を( セグメント: オフセット）に転送する。             |
| B0+rb      | MOV r8, imm8      | imm8 をr8 に転送する。                                   |
| B8+rw      | MOV r16, imm16    | imm16 をr16 に転送する。                                 |
| B8+rd      | MOV r32, imm32    | imm32 をr32 に転送する。                                 |
| C6 /0      | MOV r/m8, imm8    | imm8 をr/m8 に転送する。                                 |
| C7 /0      | MOV r/m16, imm16  | imm16 をr/m16 に転送する。                               |
| C7 /0      | MOV r/m32, imm32  | imm32 をr/m32 に転送する。                               |

MOVE 命令のオペランドの組み合わせのパターンだけで 20 通りもあります。
あまりの複雑さにまたまたくじけそうになりますが、
先ほどの説明を思い出してもらえれば読み解けます。

まず、
この表の読み方を説明しましょう。
以下の行を例に説明します。

| オペコード | 命令           | 説明                     |
|------------+----------------+--------------------------|
| 89 /r      | MOV r/m32, r32 | r32 をr/m32 に転送する。 |

2 番目のカラムは、
命令の *ニーモニック* と、
その命令がどのような *オペランド* を取るかを表しています。
例えば「MOV r/m32, r32」の場合、
命令のニーモニックが MOV で、
オペランドは r/m32 と r32 の 2 つを取ることを意味しています。
前述のとおり、
これはインテル構文での記法であり、
宛先オペランドに r/m32 を、
出所オペランドに r32 を取ることを意味しています。

オペランドの r/m32 は「r32 または m32 のどちらか」の意味です。
そして、
r32 が 32 ビットの汎用レジスタ、
m32 が 32 ビットのメモリロケーションを意味します。

3 番目のカラムは、
この命令が行う処理の説明です。
「r32 を r/m32 に転送する。
」は「32 ビットの汎用レジスタの値を、
32 ビットの汎用レジスタかメモリロケーションに転送する。
」ことを意味します。
メモリロケーションは間接アドレス参照でもかまいません。

したがって、
CPU の抽象モデルで説明すると、
「\r{i} ← \r{j}」または「[$m$] ← \r{i}」に相当します。
ただし、
\r{i}、
\r{j} はすべて 32 ビットの汎用レジスタで、
転送されるデータサイズも 32 ビットです。
また、
間接アドレス参照が可能なので、
メモリロケーションの $m$ に、
$\r{j} + \r{k} \times s + d$ のようなアドレスを指定することも可能です。

1 番目のカラムは命令の *オペコード* を示しており、
例えばオペコードが 89 /r というのは、
- 機械語の最初の 1 バイトが 0x89 である
- 2 バイト目にModR/M バイトの 1 バイトが続く
ことを意味しています。

*ModR/M バイト* は、
アドレッシング形式指定バイト (addressing-form specifier byte) とも呼ばれ、
命令のオペランドが、
どのようなレジスタやメモリロケーションの組み合わせなのかを表します。
例えば、
#+begin_src asm
	movl	%ebx, %eax
#+end_src
は、
アセンブラによって、
2 バイトの機械語 0x89、
0xd8 に変換されます。
最初の 0x89 が命令コードで、
2 番目の 0xd8 が ModR/M バイトです。
ModR/M バイトが 0xd8 であるということは、
- 一方のオペランドがレジスタ EAX、AX、XL、MM0、XMM0 のいずれかであること
- 他方のオペランドがレジスタ BL、BX、EBX、MM3、XMM3 のいずれかであること
を意味しています。

このため、
IA-32 アーキテクチャの CPU は、
オペランドの大きさのデフォルトが 32 ビットの場合、
0x89、
0xd8 という 2 バイトを見て、
「ああ、
これは \inst{movl %ebx, %eax} だな」と解釈できます。
なお、
ModR/M バイトの詳細については文献 \cite{Intel04:IA32J-2A} の 2.4 節を参照してください。

もう一度表を見てみましょう。
まだ説明していない表記は以下のようなものです。

| m8、m16                  | データの大きさが 8 バイト、16 バイトのメモリロケーション  |
| r/m8、r/m16              | 8 バイトまたは 16 バイトの汎用レジスタ/メモリロケーション |
| Sreg                     | セグメントレジスタ                                        |
| AL、AX、EAX              | レジスタ AL、AX、EAX                                      |
| imm8、imm16、imm32       | 8 ビット、16 ビット、32 ビットの即値                      |
| moffs8、moffs16、moffs32 | 8 ビット、16 ビット、32 ビットのメモリオフセット          |

オペコード中の他の記号の意味は以下の通りです。
これも詳細については文献 \cite{Intel04:IA32J-2A} の 3.1.1.1 節を参照してください。

| +rb | 8 ビットのレジスタを表す 0～7 の数値。命令コードに加算される。     |
| +rw | 16 ビットのレジスタを表す 0～7 の数値。命令コードに加算される。    |
| +rd | 32 ビットのレジスタを表す 0～7 の数値。命令コードに加算される。    |
| /0  | 後続する ModR/M バイトのレジスタ指定部 (Reg/Opcode フィールド) が 0 |

上の「/数」という表記は、
オペコードに続く ModR/M バイトのレジスタ指定部 (Reg/Opcode フィールド) が「数」であることを意味しています。

上の表から、
MOVE 命令だけでオペコードが 13 個
#+begin_quote
88 89 8a 8b 8c 8e a0 a1 a2 a3 b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf c6 c7
#+end_quote
もあることがわかります。

最後に、
MOV 命令の利用例を示します。
GNU アセンブラ (GAS) に ~-al~ オプションを指定したときの出力です (図 [[fig:x86trans/mov.lst]]) 。
左端からアセンブリ言語プログラムの行番号、
アドレスのオフセット、
機械語のプログラム、
アセンブリ言語のプログラムです。

#+caption: x86trans/mov.lst
#+label: fig:x86trans/mov.lst
#+include: "code/x86trans/mov.lst" src asm

MOV 命令に、
どのようなオペランドが指定できるか、
また、
オペランドの指定の方法によって、
それぞれどのような機械語の命令にエンコードされているかを見てみましょう。

なお、
右端のコメントには、
その命令を実行した直後のレジスタやメモリの値を示しています。
例えば、
#+begin_src raw
   5 0000 B012                  movb    $0x12, %al              # al: 0x12
#+end_src
の右端の「al: 0x12」は、
この命令 (~movb $0x12, %al~) の実行後に、
レジスタ AL の値が 0x12 であることを表しています。
同様に、
#+begin_src asm
  11 000c C6050000              movb    $0x01, val_b            # val_b: 0x01
#+end_src
の右端の「val_b: 0x01」は、
この命令 (~movb $0x01, val_b~) の実行後に、
~val_b~ 番地の値が 0x01 であることを表しています。

このサンプルプログラムは、
単体で動作するプログラムになっています (単なる記述例ではなく、
1 つのプログラムとして動作します) 。
コメントに記載されているレジスタやメモリの値を見て、
各命令が何を行っているのかを追いかけてみるとよいでしょう。

*** データ拡張転送命令: MOVZX/MOVSX (Move with Zero/Sign-Extend)

*MOVZX --- Move with Zero-Extend* [3-559]

*MOVSX ---Move with Sign-Extension* [3-553]

上で紹介した MOV 命令では、
転送するデータの大きさと、
格納先のレジスタやメモリの大きさが同じでした。
つまり、
MOV 命令は
- 8 ビット (バイト) のデータを、8 ビットのレジスタやメモリの領域に転送する
- 16 ビット (ワード) のデータを、16 ビットのレジスタやメモリの領域に転送する
- 32 ビット (ダブルワード) のデータを、32 ビットのレジスタやメモリの領域に転送する
ための命令でした。

しかし場合によっては、
- 8 ビット (バイト) のデータを、*16 ビットの* レジスタやメモリの領域に
  転送する
- 16 ビット (ワード) のデータを、*32 ビットの* レジスタやメモリの領域
  に転送する
といった処理も必要となります。
これらの処理のうち、
転送先がレジスタである処理を行う命令が MOVZX 命令と MOVSX 命令です。

MOVZX 命令と MOVSX 命令は、
オペランドを 2 つ取り、
出所オペランドのデータのサイズを、
宛先オペランドの大きさにまで拡張したあと、
その拡張した値を宛先オペランドに格納します。
宛先オペランドにはレジスタしか指定できません。

MOVZX 命令および MOVSX 命令の動作を、
CPU の抽象モデルで説明すると以下の通りです。

- レジスタの値を、より大きなレジスタにゼロ拡張/符号拡張してコピーする

  #+begin_quote
  \r{i} ← \r{j}
  #+end_quote
  レジスタ \r{i} には、
  レジスタ \r{j} よりも大きなレジスタを指定します。
  例えば、
  レジスタ \r{i} に 32 ビットの EAX レジスタを、
  レジスタ \r{j} には 16 ビットの BX レジスタを指定します。
  
  #+begin_note
  CPU の抽象モデルでは、
  転送されるデータのサイズを表現していないので、
  MOVZX 命令や MOVSX 命令の処理は、
  MOV 命令の処理と同じような記述になります。
  #+end_note

  MOVZX 命令と MOVSX 命令は、
  データのサイズの拡張方法が異なります。
  
  MOVZX 命令は、
  出所オペランドの値を *符号なし整数* としてサイズを拡張します。
  したがって、
  上位ビットは単にゼロで埋められます。
  
  MOVSX 命令は、
  出所オペランドの値を *符号付き整数* としてサイズを拡張します。
  
  例えば、
  レジスタ CL の値が 0x80 の時、
  #+begin_src asm
  	movzx	%cl, %eax
  #+end_src
  を実行すると、
  レジスタ CL の値を符号なし整数 (0x80 = 128) とみなして、
  レジスタ EAX には 0x00000080 が格納されます。
  
  一方、この時に
  #+begin_src asm
  	movsx	%cl, %eax
  #+end_src
  を実行すると、
  レジスタ CL の値を符号付き整数 (0x80 = -128) とみなして、
  レジスタ EAX には 0xffffff80 が格納されます。

  MOVZX 命令と MOVSX 命令の使い分けに限らず、
  アセンブリ言語プログラミングでは、
  常に「このデータは符号なし整数か?
  それとも符号付き整数か?
  」をプログラマが意識しておく必要があります。

- メモリの値を、より大きなレジスタにゼロ拡張/符号拡張してコピーする

  #+begin_quote
  \r{i} ← [$m$]
  #+end_quote
  上と同じですが、
  レジスタの値ではなく、
  メモリ上の値を符号なし整数としてサイズを拡張します。

MOVZX 命令と MOVSX 命令のオペコード表 (文献 \cite{Intel04:IA32J-2B} より抜粋) を見てみましょう。

| オペコード | 命令             | 説明                                         |
|------------+------------------+----------------------------------------------|
| 0F B6 /r   | MOVZX r16, r/m8  | バイトをワードにゼロ拡張して転送する。       |
| 0F B6 /r   | MOVZX r32, r/m8  | バイトをダブルワードにゼロ拡張して転送する。 |
| 0F B7 /r   | MOVZX r32, r/m16 | ワードをダブルワードにゼロ拡張して転送する。 |
| 0F BE /r   | MOVSX r16, r/m8  | バイトをワードに符号拡張して転送する。       |
| 0F BE /r   | MOVSX r32, r/m8  | バイトをダブルワードに符号拡張して転送する。 |
| 0F BF /r   | MOVSX r32, r/m16 | ワードをダブルワードに符号拡張して転送する。 |

8 ビット (バイト)、
16 ビット (ワード)、
32 ビット (ダブルワード) の間で、
レジスタまたはメモリの領域に格納されているビット数の小さいデータを、
より大きなレジスタにコピーできることがわかります。

ただし、
宛先オペランドにはレジスタしか指定できないこともわかります。
出所オペランドがレジスタであれば、
宛先オペランドにメモリロケーションを指定して、
#+begin_src asm
	movzx	%ax, $0x8000	# 書けない
#+end_src
のように書けそうなものですが、
MOVZX 命令や MOVSX 命令では記述できません。

MOVZX 命令と MOVSX 命令を使ったサンプルプログラムを示します (リスト [[fig:x86trans/movzx.lst]]) 。

#+caption: x86trans/movzx.lst
#+label: fig:x86trans/movzx.lst
#+include: "code/x86trans/movzx.lst" src raw

#+begin_note
なお、
このプログラムでは、
ニーモニック末尾の l や w などの接尾部 (サフィックス) ([[sec:gas/ia32-specific]] 節) をできるだけ付けずに (省略して) 書いています。
#+end_note
 
*** 交換命令: XCHG (Exchange)

*XCHG --- Exchange Register/Memory with Register* [4-292]

XCHG 命令は、
オペランドを 2 つ取り、
二つのオペランドの値を交換します。
出所オペランドと宛先オペランドには、
レジスタおよびメモリロケーションを指定できます。
MOV 命令と同じように、
2 つのオペランドの両方にメモリロケーションは指定できません。

XCHG 命令の動作を、
CPU の抽象モデルで説明すると以下のとおりです。

- レジスタ ←→ レジスタの交換
  #+begin_quote
  temp  ← \r{j} \\
  \r{j} ← \r{i} \\
  \r{i} ← temp
  #+end_quote

- レジスタ ←→ メモリの交換
  #+begin_quote
  temp ← [$m$] \\
  \relax [$m$]  ←  \r{i} \\
  \r{i} ← temp  
  #+end_quote

これらの処理が 3 命令として実行されるのではなく、
XCHG 命令 1 つで実行されることに注意してください。

レジスタ間の値の交換や、
レジスタとメモリの間のデータの交換は頻繁に行われる処理なので、
1 命令だけで実行できるようになっている、
という意味もあります。

これに加えて、
XCHG 命令は、
マルチタスク型のオペレーティングシステムにおけるプロセス間の排他制御のために使用されます。
*ミューテックス (mutex)* や *セマフォ (semaphore)* のような、
複数のプロセス間の排他制御のためのデータ構造を実現するために利用されます。

なお、
XCHG 命令の実行によってフラグレジスタ (EFLAGS) の値は変化しません。

MOV 命令と同じように、
XCHG 命令のオペコード表 (文献 \cite{Intel04:IA32J-2B} より抜粋) を見てみましょう。

| オペコード | 命令            | 説明                                                |
|------------+-----------------+-----------------------------------------------------|
| 90+rw      | XCHG AX, r16    | r16 をAX と交換する。                               |
| 90+rw      | XCHG r16, AX    | AX をr16 と交換する。                               |
| 90+rd      | XCHG EAX, r32   | r32 をEAX と交換する。                              |
| 90+rd      | XCHG r32, EAX   | EAX をr32 と交換する。                              |
| 86 /r      | XCHG r/m8, r8   | r8（バイトレジスタ）をr/m8 からのバイトと交換する。 |
| 86 /r      | XCHG r8, r/m8   | r/m8 からのバイトをr8（バイトレジスタ）と交換する。 |
| 87 /r      | XCHG r/m16, r16 | r16 をr/m16 からのワードと交換する。                |
| 87 /r      | XCHG r16, r/m16 | r/m16 からのワードをr16 と交換する。                |
| 87 /r      | XCHG r/m32, r32 | r32 をr/m32 からのダブルワードと交換する。          |
| 87 /r      | XCHG r32, r/m32 | r/m32 からのダブルワードをr32 と交換する。          |

MOV 命令ほどバリエーションはありませんが、
8 ビット、
16 ビット、
32 ビットの単位で、
レジスタ間およびレジスタ--メモリ間でデータ交換ができることがわかります。
また、
レジスタ AX とレジスタ EAX が特別扱いされていることがわかります。
例えば、
レジスタ ECX とレジスタ EDX の値の交換
#+begin_src asm
	xchgl	%ecx, %edx
#+end_src
であれば 0x87、
0xca の 2 バイトの機械語です。
一方、
レジスタ EAX とレジスタ ECX の値の交換
#+begin_src asm
	xchgl	%eax, %ecx
#+end_src
であれば 0x91 の 1 バイトの機械語で済みます。

最後に、
XCHG 命令を使ったサンプルプログラムを示します。

#+caption: x86trans/xchg.lst
#+label: fig:x86trans/xchg.lst
#+include: "code/x86trans/xchg.lst" src asm

MOV 命令の時と同じように、
これも単体で動作するプログラムになっています。

*** スタック操作命令: PUSH (Push)

*PUSH --- Push Word or Doubleword onto the Stack* [4-150]

PUSH 命令は、
指定されたオペランドの値をスタック上にプッシュします。
オペランドには即値、
レジスタ、
メモリロケーションが指定できます。

PUSH 命令の動作を、
CPU の抽象モデルで説明すると以下の通りです。
ここでは、
スタックポインタを \sp、
スタックに積むデータの大きさ (バイト単位) を $s$ と表記します。
また IA-32 アーキテクチャの場合、
スタックポインタはレジスタ ESP です。

- 即値をプッシュ
  #+begin_quote
  \sp ← <-> $s$ \\
  \relax [\sp] ← $c$
  #+end_quote

- レジスタの値をプッシュ
  #+begin_quote
  \sp ← <-> $s$ \\
  \relax [\sp] ← \r{i}
  #+end_quote

- メモリの値をプッシュ
  #+begin_quote
  \sp ← <-> $s$ \\
  \relax [\sp] ← [$m$]
  #+end_quote

スタックに積むデータの大きさ (1 バイト、
2 バイト、
4 バイト) だけスタックポインタ (ESP レジスタ) の値を減らし、
スタックの一番上に指定されたオペランドの値を書き込みます。

PUSH 命令のオペコード表です (文献 \cite{Intel04:IA32J-2B} より抜粋)。

| オペコード | 命令       | 説明                   |
|------------+------------+------------------------|
| FF /6      | PUSH r/m16 | r/m16 をプッシュする。 |
| FF /6      | PUSH r/m32 | r/m32 をプッシュする。 |
| 50+rw      | PUSH r16   | r16 をプッシュする。   |
| 50+rd      | PUSH r32   | r32 をプッシュする。   |
| 6A         | PUSH imm8  | imm8 をプッシュする。  |
| 68         | PUSH imm16 | imm16 をプッシュする。 |
| 68         | PUSH imm32 | imm32 をプッシュする。 |
| 0E         | PUSH CS    | CS をプッシュする。    |
| 16         | PUSH SS    | SS をプッシュする。    |
| 1E         | PUSH DS    | DS をプッシュする。    |
| 06         | PUSH ES    | ES をプッシュする。    |
| 0F A0      | PUSH FS    | FS をプッシュする。    |
| 0F A8      | PUSH GS    | GS をプッシュする。    |

PUSH 命令は頻繁に使用される命令のため、
16 ビットもしくは 32 ビットの汎用レジスタのプッシュであれば、
1 バイトの機械語で表現されることがわかります。

PUSH 命令の実行によってフラグレジスタ (EFLAGS) の値は変化しません。

PUSH 命令のサンプルプログラムです。

#+caption: x86trans/push.lst
#+label: fig:x86trans/push.lst
#+include: "code/x86trans/push.lst" src asm

例えば、
#+begin_src asm
	pushl	%eax
	pushl	%ecx
#+end_src
の 2 命令は、
2 バイトの 0x50、
0x51 で表現されています。

即値をプッシュする場合には、
即値を格納する必要があるため、
例えば、
#+begin_src asm
	pushl	$0x12345678
#+end_src
は 0x68、
0x78、
0x56、
0x34、
0x12 の 5 バイトで表現されています。

*** スタック操作命令: POP (Pop)

*POP --- Pop a Value from the Stack*  [4-86]

POP 命令は、
上で説明した PUSH 命令の対になる命令です。
スタックの一番上の値をポップし、
指定したオペランドに格納します。
オペランドにはレジスタもしくはメモリロケーションが指定できます。

POP 命令の動作を、
CPU の抽象モデルで説明すると以下のとおりです。
ここでも PUSH 命令と同様に、
スタックポインタを \sp、
スタックに積むデータの大きさ (バイト単位) を $s$ と表記します。
また IA-32 アーキテクチャの場合、
スタックポインタはレジスタ ESP です。

- レジスタの値へポップ
  #+begin_quote
  \r{i} ← [\sp] \\
  \sp ← <+> $s$
  #+end_quote

- メモリへポップ
  #+begin_quote
  [$m$] ← [\sp] \\
  \sp ← <+> $s$
  #+end_quote

スタックの一番上に格納されている値を、
指定されたオペランドに読み込みます。
その後、
スタックポインタの値を、
データの大きさ (1 バイト、
2 バイト、
4 バイト) だけ増加させます。

POP 命令のオペコード表です (文献 \cite{Intel04:IA32J-2B} より抜粋)。

#+attr_latex: :environment maxtabular
| オペコード | 命令    | 説明                                                                     |
|------------+---------+--------------------------------------------------------------------------|
| 8F /0      | POP m16 | スタックのトップをm16 にポップし、スタックポインタをインクリメントする。 |
| 8F /0      | POP m32 | スタックのトップをm32 にポップし、スタックポインタをインクリメントする。 |
| 58+rw      | POP r16 | スタックのトップをr16 にポップし、スタックポインタをインクリメントする。 |
| 58+rd      | POP r32 | スタックのトップをr32 にポップし、スタックポインタをインクリメントする。 |
| 1F         | POP DS  | スタックのトップをDS にポップし、スタックポインタをインクリメントする。  |
| 07         | POP ES  | スタックのトップをES にポップし、スタックポインタをインクリメントする。  |
| 17         | POP SS  | スタックのトップをSS にポップし、スタックポインタをインクリメントする。  |
| 0F A1      | POP FS  | スタックのトップをFS にポップし、スタックポインタをインクリメントする。  |
| 0F A9      | POP GS  | スタックのトップをGS にポップし、スタックポインタをインクリメントする。  |

PUSH 命令と同様に、
POP 命令も頻繁に使用される命令のため、
16 ビットもしくは 32 ビットの汎用レジスタへのポップであれば、
1 バイトの機械語で表現されることがわかります。

POP 命令の実行によってフラグレジスタ (EFLAGS) の値は変化しません。

POP 命令のサンプルプログラムです。

#+caption: x86trans/pop.lst
#+label: fig:x86trans/pop.lst
#+include: "code/x86trans/pop.lst" src asm

*** アドレス計算命令: LEA (Load Effective Address)

*LEA --- Load Effective Address* [3-431]

LEA 命令は、
2 つのオペランドを取り、
出所オペランドに指定したメモリロケーションのアドレスを、
宛先オペランドに指定したレジスタに読み込みます。

LEA 命令の動作を CPU の抽象モデルで記述すると以下のようになります。

- メモリのアドレスをレジスタに読み込む
  #+begin_quote
  \r{i} ← $m$
  #+end_quote

MOV 命令と同じように見えますが、
「MOV 命令はメモリロケーション $m$ に *格納されている値* を読み込む」、
「LEA 命令はメモリロケーション $m$ の *アドレスの値* を読み込む」という点が異なっています。

なお、
文献 \cite{Intel04:IA32J-1} における命令の分類 ([[sec:x86regs/category]] 節) では、
LEA 命令は「データ転送命令」ではなく、
「その他の命令 (アドレス計算命令)」に分類されています。

LEA 命令は「レジスタ、
メモリロケーション」という組み合わせのオペランドしか取らないため、
オペコード表も単純です (文献 \cite{Intel04:IA32J-2A} より抜粋)。

| オペコード | 命令       | 説明                                          |
|------------+------------+-----------------------------------------------|
| 8D /r      | LEA r16, m | m の実効アドレスをレジスタ r16 にストアする。 |
| 8D /r      | LEA r32, m | m の実効アドレスをレジスタ r32 にストアする。 |

LEA 命令のサンプルプログラムを示します。

#+caption: x86trans/lea.lst
#+label: fig:x86trans/lea.lst
#+include: "code/x86trans/lea.lst" src asm

** 章末問題
<<sec:x86trans/quiz>>

1. レジスタ EAX の値を、レジスタ EBX と ECX の両方にコピーするアセンブ
   リ言語プログラムを示せ。

2. レジスタ EAX の値の下位 8 ビットを、レジスタ EBX の下位 8 ビット
   にコピーするアセンブリ言語プログラムを示せ。ただし、レジスタ EBX の
   上位 24 ビットは変化させないこと。

3. レジスタ EAX の値の下位 16 ビットを、レジスタ ESI の下位 16 ビット
   にコピーするアセンブリ言語プログラムを示せ。ただし、レジスタ ESI の
   上位 16 ビットは変化させないこと。

4. レジスタ EAX の値の下位 16 ビットを、レジスタ ECX の下位 16 ビット
   にコピーするアセンブリ言語プログラムを示せ。ただし、レジスタ ECX の
   上位 16 ビットはゼロでクリアすること。

5. レジスタ AX と BX の値を交換するアセンブリ言語プログラムを答えよ。
   ただし、(1) MOV 命令のみ使用したもの、(2) XCHG 命令を使用したもの、
   の 2 種類を示せ。

6. \inst{pushl $123} と同じような処理をするアセンブリ言語プログラムを、
   MOV 命令と ADD 命令だけを使って記述せよ。

7. \inst{pushl $123} と同じような処理をするアセンブリ言語プログラムを、
   MOV 命令と LEA 命令だけを使って記述せよ。

8. \inst{popl %eax} と同じ処理をするアセンブリ言語プログラムを、MOV 命
   令と ADD 命令だけを使って記述せよ。

   #+begin_answer
   1.〜8. をまとめて記述したプログラムのアセンブル結果 ~ex.lst~ (図 [[fig:x86trans/ex/ex.lst]])
   #+caption: x86trans/ex/ex.lst
   #+label: fig:x86trans/ex/ex.lst
   #+include: "code/x86trans/ex/ex.lst" src asm
   #+end_answer
