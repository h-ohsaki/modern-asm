# -*- Org -*-
# 
# Copyright (c) 2021, Hiroyuki Ohsaki.
# All rights reserved.
# 

# This document is licensed under a Creative Commons
# Attribution-NonCommercial-ShareAlike 4.0 International License (CC
# BY-NC-SA 4.0).

# This document is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Creative Commons License for more details.

# You should have received a copy of the license along with this work.
# If not, see <http://creativecommons.org/licenses/by-nc-sa/4.0/>.

* アセンブリ言語プログラムの実行とインラインアセンブラ
<<ch:inline>>

** インラインアセンブラとは
<<sec:inline/overview>>

*** GCC のインラインアセンブラ

まず、
インラインアセンブラとは何かを説明しましょう。

英語の in-line とは「直線的に配置された」を意味する形容詞です。
in-line skate (インラインスケート) の in-line です。
インラインスケートとは、
靴の底に 4 個程度の車輪が縦 1 列に付いているローラースケートのことであり、
4 個程度の車輪が直線的に配置されているので in-line skate と呼ばれます。

*インラインアセンブラ (inline assembler)* とは、
「C 言語のような高級言語のソースコードの中に、
C 言語で書かれたプログラムと混在した形でアセンブリ言語のプログラムを記述できる」という機能です。
C 言語で書かれたプログラムのソースコードには、
C 言語の *文 (statement)* が並んでいます。
直線的に並んでいる C 言語の文の中に、
アセンブリ言語で書かれたプログラムが混ざって並んでいることから、
インラインアセンブラと呼ばれます。

インラインアセンブラは、
C 言語に固有の機能ではありません。
Ada 言語や D 言語のような、
C 言語以外の高級言語でもサポートされています (より正確には、
インラインアセンブラをサポートしている処理系もあります)。
ただし、
1. C 言語はコンピュータのハードウェアに密接に関連した言語である
2. ハードウェアに密接に関連した高級言語の中では C 言語が最も普及している
ことから、
多くの場合、「インラインアセンブラと言えば C 言語 (もしくは C++ 言語)」という
状況になっています。

C 言語におけるインラインアセンブラは、
処理系 (C コンパイラ) によって実現されています。
ANSI や ISO で標準化された C 言語の仕様には、
インラインアセンブラに関する最低限の仕様しか規定されていません。
インラインアセンブラの記述法や機能は、
それぞれの処理系 (C コンパイラ) によって異なります。
したがって、
GCC でインラインアセンブラを使用する場合、
GCC 固有の記述法に従ってアセンブリ言語のプログラムを埋め込む必要があります。
同様に、
Microsoft Visual C++ (MSVC) でインラインアセンブラを使用する場合、
MSVC 固有の記述法に従ってアセンブリ言語のプログラムを埋め込む必要があります。

GCC におけるインラインアセンブラの利用例を見てみましょう。
以下のプログラムを ~inline.c~ として保存します。

#+caption: inline/inline.c
#+label: fig:inline/inline.c
#+include: "code/inline/inline.c" src C

GCC のインラインアセンブラを利用して、
変数 ~i~ の値に 10 進数の 456 を加算しています。

実際に実行してみましょう。
#+begin_src sh
$ gcc -fno-pic inline.c -o inline
$ ./inline
i = 579
#+end_src
確かに 123 + 456 = 579 が計算されています。

~inline.c~ は、
1 行を除き、
C 言語で書かれたごく単純なプログラムです。
まず、
自動変数 ~i~ を宣言し、
10 進数の 123 で初期化しています。
その後、
見慣れない
#+begin_src C
asm(なんとか);
#+end_src
という一文のあとに、
C 言語の標準ライブラリ中の関数 ~printf~ を使って変数 ~i~ の値を標準出力に表示しています。

名前から想像できるように、
「~asm(なんとか);~」がインラインアセンブラで記述したアセンブリ言語プログラムです。
[[sec:mem/cpu-model]] 節で導入した CPU 処理の抽象モデルで説明すると、
#+begin_src C
  asm("addl $456,%0" : "=r" (i) : "0" (i));
#+end_src
という 1 文により
| $r$        | ← | [i]     | レジスタ $r$ に変数 ~i~ の値を格納 |
| $r$        | ← | <+> 456 | レジスタ $r$ に 456 を加算         |
| \relax [i] | ← | $r$     | レジスタ $r$ の値を変数 ~i~ に格納 |
という処理が行われます。
GCC におけるインラインアセンブラの記述法は後ほど説明しますが、
ここではおおよその流れだけを理解してもらえれば十分です。

*** インラインアセンブラは簡単?

ここまでの説明を読むと、
#+begin_quote
インラインアセンブラを使えば、
C 言語のプログラム中にアセンブリ言語のプログラムを埋め込めるのか。
短い行数で C 言語とアセンブリ言語を併用できるのか。
アセンブリ言語の勉強を始めるには都合がよさそうだ。
#+end_quote
と思えるかもしれませんが、
それは誤解です。

インラインアセンブラのサンプルプログラムをまねて実行してみるだけなら簡単にできます。
上の ~inline.c~ を入力して実行するだけなら簡単にできます。

ただし、
インラインアセンブラを使って、
自分でプログラムを書こうとすると急に難しくなります。
例えば GCC のインラインアセンブラでアセンブリ言語のプログラムを書こうとすると、
以下を理解していなければなりません。
- C 言語の文法・記述法
- コンピュータのアーキテクチャやハードウェア構成
- アセンブリ言語の概念
- GAS の文法・記述法
- GCC が生成するアセンブリ言語プログラムの構造・特性
- 対象とするコンピュータにおける ABI (Application Binary Interface)
- GCC におけるインラインアセンブラの文法・記述法

これらすべてがわかって初めて、
自由自在にインラインアセンブラが書けるようになります。

UNIX の哲学の 1 つに、
*KISS の原則 (principle)* があります。
「Keep It Simple, Stupid」の略で、
「あれもこれもできる巨大なツールを作るのではなく、
単一のことだけを賢くできる小さいツールを作り、
それらを組み合わせよ」という考え方です。

例えば、
ファイルの一覧も見られて、
ファイルの中身も見られて、
ファイルの属性によって並び換えられて、
おまけにファイルの圧縮やバックアップもできるような高機能なファイル管理ツール (ファイラ) を作ってはいけないということです。

この場合、
- ファイルの一覧の表示 *だけ* を行う ~ls~ コマンドを作成する
  - ~ls~ コマンドはファイルの一覧の表示だけを賢く行う
- ファイルの中身の表示 *だけ* を行う ~cat~ コマンドを作成する
  - ~cat~ コマンドはファイルの中身の表示だけを賢く行う
- (ファイル名に限らず) テキストの並び換え *だけ* を行う ~sort~ コマン
  ドを作成する
  - ~sort~ コマンドはテキストの並び換えだけを賢く行う
ようにすべきなのです。

KISS の原則はオペレーティングシステムの設計だけでなく、
さまざまな場面に当てはまります。
アセンブリ言語を学ぶときにも、
実際にアセンブリ言語でプログラムを書くときにも当てはまります。
つまり、
アセンブリ言語でプログラム書く場合に KISS の原則を当てはめると、
「単一の処理だけを賢くできるアセンブリ言語のプログラムを書き、
それらを組み合わせよ」と言い換えられます。

アセンブリ言語プログラムを学んでいるなら、
インラインアセンブラを使わないほうが簡単ですし、
学習効率も高くなります。
一部、
インラインアセンブラでしか書けないプログラムもありますし、
インラインアセンブラが非常に効果的なケースがあるのも事実ですが、
インラインアセンブラが本当に必要になったときに初めて、
インラインアセンブラを習得してもかまわないでしょう。

このため、
本書では、
まず、
インラインアセンブラを使わずに、
C 言語からアセンブリ言語のプログラムを呼び出す方法を説明します。

** C 言語からアセンブリ言語プログラムを呼び出す
<<sec:inline/call-from-c>>

*** コンパイル・アセンブル・リンクと実行

まず、
アセンブリ言語で書かれたプログラムを呼び出すための、
C 言語で書かれたプログラム ~sum.c~ (図 [[fig:inline/sum.c]]) です。

#+caption: inline/sum.c
#+label: fig:inline/sum.c
#+include: "code/inline/sum.c" src C

次に、
アセンブリ言語で書かれた以下のプログラムを ~sum_asm.s~ という名前で保存します。

#+caption: ~inline/sum_asm.s~
#+label: fig:inline/sum_asm.s
#+include: "code/inline/sum_asm.s" src asm

それでは実行してみましょう。
C 言語で書かれたプログラムをコンパイルし、
アセンブリ言語で書かれたプログラムをアセンブルします。
最後に、
それぞれのオブジェクトファイルをリンクし、
実行ファイルを作成します。
#+begin_src sh
$ gcc -fno-pic -c -o sum.o sum.c
$ as -o sum_asm.o sum_asm.s
$ gcc -o sum sum.o sum_asm.o
$ ./sum
sum = 45
#+end_src
~int~ 型の配列 ~array~ に格納されている 10 個の整数の和が表示されました。
10 個の整数の和が計算できても別に驚くことではありませんが、
アセンブリ言語で書かれたプログラムが簡単に呼び出せることがわかります。

*** 呼び出し元のプログラム (C 言語プログラム)

プログラムの中身をもう少し詳しく見てみましょう。
まず、
呼び出す側のプログラム ~sum.c~ です。
#+begin_src asm
#include <stdio.h>
#+end_src
C 言語の標準ライブラリの関数 ~printf~ を使用するために、
ヘッダファイル ~stdio.h~ をインクルードしています。
これはアセンブリ言語で書かれたプログラムの呼び出しとは関係ありません。

#+begin_src asm
extern int sum_asm (void);      // 外部関数 sum_asm の利用を宣言
#+end_src
ここで関数 ~sum_asm~ を宣言 (declaration) しています。
*~extern~ キーワード* を付与して、
C コンパイラに対し、
~sum_asm~ は外部の関数であることを伝えています。
これにより、
関数 ~sum_asm~ は引数を取らないこと、
また、
関数 ~sum_asm~ の返り値が ~int~ であることを C コンパイラに伝えています。

他の多くの高級言語とは異なり、
C 言語における「関数」は、
C 言語で記述されている必要はありません。
C 言語で記述した関数は、
C コンパイラによってコンパイルされ、
最終的には機械語のプログラムになります。
C 言語における関数呼び出しは、
「C 言語で書かれたプログラム」を呼び出しているのではなく、
「もともとは C 言語で書かれたプログラムだったのだが、
現在はコンパイルが済んで機械語になっているプログラム」を呼び出しています。

したがって、
もともと C 言語で書かれたプログラム (C コンパイラによって機械語に変換されたプログラム) であっても、
アセンブリ言語で書かれたプログラムであっても特に区別はありません。
このため、
上の関数 ~sum_asm~ は、
C 言語で書くこともできますし、
アセンブリ言語で書くこともできます。

その直後の
#+begin_src C
// 大きさ 10 の配列を宣言・初期化
int array_size = 10;
int array[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
#+end_src
は ~int~ 型の変数 ~array_size~ と、
~int~ 型の配列変数 ~array~ を宣言し、
それらの値を初期化しています。
これらの変数は *大域変数 (global variable)* として宣言しているので、
このファイル ~sum.c~ の外部からも参照できます。

キーワード ~extern~ を明示的に付与して、
#+begin_src C
// 大きさ 10 の静的配列を宣言・初期化
extern int array_size = 10;
extern int array[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
#+end_src
と書いても同じ意味になります。
キーワード ~extern~ を付けなくても (キーワード ~static~ を付けない限り) 外部から参照できます。

関数 ~sum_sum~ の呼び出し方は、
通常の C 言語で書かれたプログラムの場合と同じです。
#+begin_src C
int main(void)
{
  int sum = sum_asm ();         // 外部関数 sum_asm の返り値を表示
  printf ("sum = %d\n", sum);
}
#+end_src
関数 ~sum_asm~ を呼び出し、
関数からの返り値を ~int~ 型の変数 ~sum~ に格納しています。

*** 呼び出し先のプログラム (アセンブリ言語)

では、
アセンブリ言語プログラム ~sum_asm.s~ の中身を見ていきましょう。
#+begin_src asm
        .global sum_asm         # シンボル sum_asm を外部から参照可能に
        .text                   # .text セクション開始
#+end_src
疑似命令 .global によって、
~sum_asm~ というシンボルを外部から参照できるようにしています。
これにより、
~sum_asm~ という関数を C 言語のプログラムから呼び出せるようになります (より正確には、
C 言語のプログラムから ~sum_asm~ という名前を参照できるようになります)。

#+begin_src asm
sum_asm:
        movl    $0, %eax        # EAX ← 0
        movl    $array, %edx    # EDX ← 配列 array のアドレス
        movl    array_size,%ecx # ECX ← 配列の大きさ
L1:
        add     (%edx),%eax     # EAX に配列の要素を加算
        add     $4,%edx         # 配列のアドレスを +4 (int = 32 ビットなので)
        loop    L1              # ECX を -1 し、ゼロでなければ L1 にジャンプ
        ret                     # 計算結果はレジスタ EAX に格納されている
#+end_src
アセンブリ言語で書いたプログラムの本体です。
IA-32 アーキテクチャの個々の命令はまだ説明していないので、
ここではプログラム全体の流れを理解できれば十分です。

このプログラムでは、
~int~ 型の配列 ~array~ に格納されている値の合計を計算しています。
C 言語のプログラムで宣言された変数 ~array~ や ~array_size~ を参照していることがわかります。
C 言語のプログラムで宣言した、
(局所変数や局所関数ではない) 変数や関数はアセンブリ言語から参照することができます。

例えば、
#+begin_src asm
        movl    $array, %edx    # EDX ← 配列 array のアドレス
#+end_src
は ~int~ 型の配列 ~array~ のアドレスをレジスタ EDX に読み込んでいます。
~int~ 型の変数の大きさが 32 ビットということを知っているので、
~movl~ によって 32 ビットのデータをレジスタ EDX に読み込んでいます。
言い換えれば、
C 言語における変数のデータサイズを理解していなければ、
アセンブリ言語から C 言語で宣言した変数を扱うことはできません。

同じような表記ですが、
#+begin_src asm
        movl    array_size,%ecx # ECX ← 配列の大きさ
#+end_src
は変数 ~array_size~ が格納されている *メモリのアドレスを* レジスタ ECX に格納しています。
C 言語では、
配列変数の変数名は、
変数が格納されているメモリのアドレス (ポインタ) を意味します。
したがって、
アセンブリ言語では ~array_size~ によって配列変数の *先頭のアドレスを* 取得できます。

*** 呼び出し元に対する返り値の実現

このプログラムでは、
計算結果をレジスタ EAX に格納しています。
また、
レジスタ EAX に計算結果を格納したまま、
~ret~ で呼び出し元のプログラム (今の場合は C 言語で書かれたプログラムの関数 ~main~) に戻ります。

そして、
C 言語で書かれたプログラムでは、
#+begin_src C
  int sum = sum_asm ();		// 外部関数 sum_asm の返り値を表示
#+end_src
のように関数 ~sum_asm~ からの返り値を受け取っています。

[[sec:stack/funcall]] 節で述べたように、
サブルーチン呼び出しにおいて、
呼び出し元のプログラムからサブルーチンに対してどのように引数を渡すか、
また、
サブルーチンからの返り値をどのように呼び出し元のプログラムに返すかは、
いくつかのバリエーションがあります。

IA-32 アーキテクチャの UNIX 系オペレーティングシステムでは、
関数呼び出しの引数をスタックに積み、
関数からの返り値をレジスタ EAX に返す、
という約束になっています ([[sec:stack/abi]] 節)。
上のサンプルプログラムでは、
この約束に従って、
関数の計算結果をレジスタ EAX で返しています。
呼び出し元の関数 (今の場合、
C 言語で書かれたプログラムの関数 ~main~) も、
返り値がレジスタ EAX で返されることを知っているため、
関数の返り値を正しく受け取れます。

*** C 言語とアセンブリ言語の関係

ここまでを整理すると、
C 言語で書かれたプログラム ~foo.c~ から、
アセンブリ言語で書かれたプログラム ~bar.s~ 中の関数 ~func~ を呼び出すためには、
以下の条件を満たす必要があります。

- C 言語で書かれたプログラム ~foo.c~
  - 外部関数 ~func~ をキーワード ~extern~ を付けて宣言する
  - 通常の関数と同じように、関数 ~func~ を ~func()~ のように呼び出す
- アセンブリ言語で書かれたプログラム ~bar.s~
  - 疑似命令 .global により、シンボル ~func~ を外部から参照できるよう
    にする
  - .text セクションに ~func~ というラベルから始まるプログラムを記述す
    る
  - C 言語の (局所変数や局所関数ではない) 変数・関数は名前で参照できる
  - プログラム ~func~ は RET 命令で呼び出し元に戻る
  - (必要であれば) 返り値はレジスタ EAX に格納する
- ~foo.c~ と ~bar.s~ から実行ファイル ~prog~ を生成する
  - ~foo.c~ をコンパイルし、オブジェクトファイル ~foo.o~ を生成する
  - ~bar.s~ をアセンブルし、オブジェクトファイル ~bar.o~ を生成する
  - ~foo.o~ と ~bar.o~ をリンクし、実行ファイル ~prog~ を得る

** プログラムの例: CPU の TSC (Time Stamp Counter) 取得

せっかくなので、
~int~ 型の配列の和を計算するという単純なプログラムではなく、
アセンブリ言語でしか書けないプログラムを書いてみましょう。

先ほどの例と同じように、
C 言語で書かれた以下のプログラムを ~rdtsc.c~ として保存します。

#+caption: inline/rdtsc.c
#+label: fig:inline/rdtsc.c
#+include: "code/inline/rdtsc.c" src C

アセンブリ言語で書かれた以下のプログラムを ~rdtsc_asm.s~ として保存します。

#+caption: ~inline/rdtsc_asm.s~
#+label: fig:inline/rdtsc_asm.s
#+include: "code/inline/rdtsc_asm.s" src asm

~rdtsc.c~ および ~rdtsc_asm.s~ をそれぞれコンパイル、
アセンブルしたあと、
リンカで結合することにより実行ファイル ~rdtsc~ を得ます。
#+begin_src sh
$ gcc -fno-pic -c -o rdtsc.o rdtsc.c
$ as -o rdtsc_asm.o rdtsc_asm.s
$ gcc -o rdtsc rdtsc.o rdtsc_asm.o
#+end_src
これらのプログラムは、
IA-32 アーキテクチャの CPU が持っている *RDTSCP (Read Time-Stamp Counter and Processor ID)* という特殊な命令を実行し、
CPU の現在の *クロックカウンタ (TSC; Time Stamp Counter)* を取得します。
TSC は Pentium 以降の IA-32 アーキテクチャの CPU が持っている内部のカウンタです。
CPU のリセット時にゼロに初期化され、
CPU のクロックに合わせて 1 つずつ増加します。
CPU が複数のコアを持つ場合には、
コアごとに TSC を持っています。
RDTSCP 命令は、
この命令を実行した CPU コアの TSC を取得できます。

TSC は 64 ビットのカウンタです。
RDTSCP 命令によって、
TSC の上位 32 ビットがレジスタ EDX に、
TSC の下位 32 ビットがレジスタ EAX に保存されます。

このプログラムを実行すると、
CPU の TSC の値を標準出力に表示します。
#+begin_src sh
$ ./rdtsc
1646531219
#+end_src

** プログラムの例: 3 種類の strlen 関数

このプログラムを実行するだけだとあまり面白くありませんが、
TSC の値を取得できると、
プログラムの実行にかかるクロック数を計測できます。

ここでは、
関数 ~strlen~ を C 言語とアセンブリ言語で実装し、
それぞれの実行速度を、
実行に要したクロック数を計測することで比較してみます。
関数 ~strlen~ とは、
C 言語の標準ライブラリに含まれている文字列操作関数の 1 つです。
文字列の長さを返す関数です。
関数 ~strlen~ は、
~char~ 型の配列へのポインタを引数として受け取り、
~size_t~ 型の長さを返します。

TSC を使って、
- C 言語で実装した関数 ~strlen_c~
- アセンブリ言語で実装した関数 ~strlen_asm~ (素朴な実装)
- アセンブリ言語で実装した関数 ~strlen_asm2~ (REPNE 命令による実装)
の実行時間を計測してみます。

まず、
C 言語のプログラム ~strlen.c~ です。

#+caption: inline/strlen.c
#+label: fig:inline/strlen.c
#+include: "code/inline/strlen.c" src C

関数 ~strlen_c~ は、
C 言語で実装した ~strlen~ 関数です。
C 言語ではヌル文字 ~\0~ が文字列の終端を表しています。
この関数では、
文字列中に含まれるヌル文字を探索することにより、
文字列長を計算しています。
~char~ 型の配列へのポインタ ~p~ と ~while~ ループを使用した、
ごく普通の C 言語プログラムによる実装です。

先ほどの ~rdtsp~ プログラムに、
2 種類の関数 ~strlen~ の実装を追加した ~strlen_asm.s~ です。

#+caption: inline/strlen_asm.s
#+label: fig:inline/strlen_asm.s
#+include: "code/inline/strlen_asm.s" src asm

関数 ~strlen_asm~ と関数 ~strlen_asm2~ は、
どちらも文字列長を返すプログラムです。
~strlen_asm~ も ~strlen_asm2~ も、
文字列を格納したメモリへのアドレスを引数として取り、
その文字列の長さを返します。

関数 ~strlen_asm~ は、
素朴な方法で実装した ~strlen~ 関数です。
CMP 命令でヌル文字かどうかを判定し、
JE 命令による条件付きジャンプでヌル文字の場合にループを抜けます。
やはり、
IA-32 アーキテクチャの命令をまだ説明していないので、
それぞれの命令の詳細はわからなくてもかまいません。
プログラム中のコメントを見て、
おおよその処理を把握してみてください。

関数 ~strlen_asm2~ もアセンブリ言語で実装した関数 ~strlen~ ですが、
REPNE 命令や SCASB 命令という、
IA-32 アーキテクチャに固有の特殊な命令を使用しています。

SCASB 命令は、
- レジスタ EDI が指すアドレスに格納されている値と、レジスタ AL の値を
  比較し、フラグレジスタを設定する
- その後、レジスタ EDI の値を自動的に +1 する
という、
条件比較とアドレスの増加をまとめて 1 命令で実行できる特殊な命令です。

REPNE 命令も珍しい特殊な命令で、
直後の命令を、
ゼロフラグが 1 になるまで繰り返します。
REPNE 命令は、
繰り返しにレジスタ ECX の値をループカウンタとして用います。
つまり、
レジスタ ECX の値を -1 しながら、
レジスタ ECX の値がゼロになるか、
ゼロフラグが 1 になるまで直後の命令を繰り返します。

このため、REPNE と SCASB の 2 命令だけで、
- 回数の上限を指定した繰り返し
- メモリアドレスを +1 しながらの繰り返し
- メモリアドレスに格納されている値がある値に一致するかのテスト
- 一致した場合のループ中断
という処理がまとめて実行されます。

** 3 種類の strlen 関数の速度計測

C 言語で書かれたプログラム ~strlen.c~ およびアセンブリ言語で書かれたプログラム ~strlen_asm.s~ をそれぞれコンパイル、
アセンブルし、
実行ファイル ~strlen~ を作成します。
#+begin_src sh
$ gcc -fno-pic -c -o strlen.o strlen.c
$ as -o strlen_asm.o strlen_asm.s
$ gcc -o strlen strlen.o strlen_asm.o
#+end_src

早速実行してみましょう。
プログラム ~strlen~ を実行すると、
以下のような値が表示されます。
#+begin_src sh
79 118424 22461 44535
#+end_src
プログラム ~strlen~ の出力は、左から順に
- 関数 ~rdtsc~ を連続して呼び出したときの経過クロック数
- C 言語で実装した関数 ~strlen~ を実行したときの経過クロック数
- アセンブリ言語で実装した関数 ~strlen~ (素朴な実装) を実行したときの
  経過クロック数
- アセンブリ言語で実装した関数 ~strlen~ (REPNE による実装) を実行した
  ときの経過クロック数
を表しています。

#+begin_note
オペレーティングシステムや CPU の内部状態により、
表示される値は異なります。
同じオペレーティングシステム、
同じコンピュータであっても、
毎回表示される値にはばらつきがあります。
値にばらつきがあることを理解した上で、
表示される値を解釈する必要があります。
#+end_note

10 万回実行したときの平均を計算してみましょう。
次のように、
10 万回実行したときの結果を ~strlen.log~ というファイルに保存します。
#+begin_src sh
$ for i in `seq 100000`
do
./strlen
done >strlen.log
#+end_src

*** クロック取得時間

さまざまな方法がありますが、
ここではプログラミング言語 AWK を使って、
各列の総和を 100 000 で割ることで平均を計算してみましょう。

まず、
1 列目のすべての値の平均を求めます。
#+begin_src sh
$ awk '{ sum += $1 } END { print sum/100000 }' strlen.log
20.5151
#+end_src

この結果から、
アセンブリ言語で作成した関数 ~rdtsc~ を連続して呼び出したときに要したクロック数の平均が約 20.5 だったことがわかります。
関数 ~rdtsc~ の呼び出しだけで数命令が実行され、
関数の呼び出し、
RDTSCP 命令の呼び出し、
関数からのリターン、
関数の返り値の保存などを合わせて、
平均すると約 20.5 クロックかかっているようです。

筆者の環境では、
動作クロックが 1.8 GHz の CPU を使用しており、
つまり 1 クロックの長さが $1 / (1.8 \times 10^9) [s] \simeq 0.56 [ns]$ となるため、
20.5 クロックは $0.56 [ns] \times 20.5 = 11.48 [ns]$ に相当します。
ns (ナノ秒) という単位が小さすぎて実感が湧きませんが、
とにかく短い時間であることはわかります。

*** C 言語で実装した関数 ~strlen_c~ の場合

次は ~strlen.log~ の 2 列目値の平均を計算します。
#+begin_src sh
$ awk '{ sum += $2 } END { print sum/100000 }' strlen.log
29677.3
#+end_src
これは、
C 言語で素朴に実装した関数 ~strlen_c~ の実行に要したサイクル数の平均が約 29 700 であったことを意味しています。
今回のプログラムでは、
長さが 1 万文字の文字列を用意し、
文字列の長さを調べています。

上の計算と同じように、
約 29 700 サイクルがどのくらいの長さかを計算すると、
\begin{align}
  0.56 [ns] \times 29677.3 = 約 16.6 [us]
\end{align}
に相当します。
ここでは、
単位が ns (ナノ秒) ではなく、
us (マイクロ秒) であることに注意してください。
1 ns は $10^{-9}$ 秒、
1 us は $10^{-6}$ 秒です。
関数 ~rdtsc~ の呼び出しだけであれば数十ナノ秒のオーダですが、
C 言語で実装した関数 ~strlen~ の実行時間は数十マイクロ秒のオーダです。

*** アセンブリ言語で実装した関数 ~strlen_asm~ の場合

アセンブリ言語で書けば、
C 言語で書いた場合よりも高速化されそうですが、
どのくらい高速化されるのでしょうか?
~strlen.log~ の 3 列目の数値の平均を計算して求めてみましょう。
#+begin_src sh
$ awk '{ sum += $3 } END { print sum/100000 }' strlen.log
5610.7
#+end_src
この結果は、
アセンブリ言語で素朴に実装した関数 ~strlen_asm~ の実行に要したサイクル数の平均が約 5 610 サイクルであったことを意味しています。
なんと、
C 言語で実装したプログラムの実行時間と比較して、
アセンブリ言語で実装したプログラムの実行時間が 1/5 以下になりました。
「アセンブリ言語万歳!」ですね。
これも実時間に換算すると
\begin{align}
  0.56 [ns] \times 5610.7 = 約 3.14 [us]
\end{align}
に相当します。
アセンブリ言語で書いても同じくマイクロ秒のオーダですが、
かなり高速化されました。

*** アセンブリ言語で実装した関数 ~strlen_asm2~ の場合

IA-32 アーキテクチャの CPU はいわゆる CISC (Complex Instruction Set Computer) であり、
いろいろ凝ったことができる命令があるので、
これらを駆使すればさらに高速化できそうです。

それでは、
アセンブリ言語で少し工夫して実装した関数 ~strlen_asm2~ の実行時間である、
~strlen.log~ の 4 列目の値の平均を計算しましょう。
#+begin_src sh
awk '{ sum += $4 } END { print sum/100000 }' strlen.log
11185.9
#+end_src

この結果は、
~strlen_asm2~ の実行に要したサイクル数の平均が約 11 200 サイクルであることを意味しています。
IA-32 アーキテクチャに固有の REPNE 命令や SCASB 命令を駆使したのですが、
なんと「素朴に実装した場合に比べて、
実行時間が約 2 倍!」になってしまいました。

これも実時間に換算すると
\begin{align}
0.56 [ns] \times 11185.9 = 約 6.26 [us]
\end{align}
に相当します。
C 言語の素朴な実装に比べると 2.5 倍くらい高速ですが、
アセンブリ言語での素朴な実装に比べると半分くらいの速度になってしまいました。
アセンブリ言語は奥が深いですね。

*** C 言語の標準ライブラリの関数 ~strlen~ の場合

最後におまけとして、
C 言語の標準ライブラリに含まれる関数 ~strlen~ でも同じように実行時間を計測してみましょう。
先ほどのプログラム ~strlen.c~ (図 [[fig:inline/strlen.c]]) を、
C 言語の標準ライブラリの関数 ~strlen~ を呼び出すように書き換えます。

#+caption: inline/strlen-c.c
#+label: fig:inline/strlen-c.c
#+include: "code/inline/strlen-c.c" src C

先ほどと同じようにコンパイルして、
関数 ~strlen~ の実行に要したサイクル数を計測します。

#+begin_src sh
$ gcc -fno-pic -o strlen-c strlen-c.c strlen_asm.s
$ for i in `seq 100000`
> do
> ./strlen-c
> done | awk '{ sum += $1 } END { print sum/100000 }'
497.146
#+end_src
ここでは ~gcc~ コマンドで 2 つのファイルをまとめてコンパイル・アセンブルし、
さらにプログラムの実行と、
関数 ~strlen~ の実行に要したサイクル数の平均の計算をまとめて実行しています。

C 言語の標準ライブラリに含まれる関数 ~strlen~ は、
筆者がアセンブリ言語で実装した関数 ~strlen_asm~ と同じくらい高速に……と思いましたが、
あれ?

関数 ~strlen_asm~ の実行に要した平均サイクル数は約 5 610 でした。
標準ライブラリに含まれる関数 ~strlen~ の実行に要した平均サイクル数は、
な、
なんと約 497 です! これはつまり、
#+begin_quote
C 言語の標準ライブラリに含まれる関数 ~strlen~ は、
筆者がアセンブリ言語で実装した関数 ~strlen_asm~ よりも 10 倍以上高速である
#+end_quote
ということを意味します。

筆者が最初にこの数値を見たときは、
何か計測の方法を間違ったのだろう……と思いましたが、
これは正しい結果です。
本当に、
C 言語の標準ライブラリの関数 ~strlen~ は、
筆者がアセンブリ言語で実装したものより 10 倍以上高速なのです。

本書の範囲を超えるのでここでは詳しく説明しませんが、
C 言語の標準ライブラリの関数 ~strlen~ は「匠の技」で高度に最適化されています。
例えば、
- IA-32 アーキテクチャ向けの関数 ~strlen~ はアセンブリ言語で書かれてい
  る
- SIMD 命令と呼ばれるベクトル演算命令を駆使している
- SIMD 命令が使えない場合でも、(1) 文字列の長さの判定 (ヌル文字の判定)
  に高度なアルゴリズムを使っている (32 ビットを 8 ビットずつチェックす
  るのではなく、32 ビットまとめてチェックしている)、(2) アウト・オブ・
  オーダ命令の実行効率を高める工夫がされている (CPU のパイプライン処理
  の効率を高めている)
といった数々の工夫がされています。
基本的なアセンブリ言語が読めるようになったら、
ぜひ関数 ~strlen~ のソースコードを読んでみてください。
関数 ~strlen~ は [[sec:gas/binutils]] 節で紹介した glibc の一部です。
IA-32 アーキテクチャ向けの関数 ~strlen~ のソースコードは、
glibc のソースコードの以下の場所にあります。
#+begin_src sh
$ find | grep strlen | grep i386
./sysdeps/i386/i586/strlen.S
./sysdeps/i386/i686/multiarch/strlen-ia32.S
./sysdeps/i386/i686/multiarch/strlen-sse2-bsf.S
./sysdeps/i386/i686/multiarch/strlen-sse2.S
./sysdeps/i386/i686/multiarch/strlen.c
./sysdeps/i386/strlen.S
./sysdeps/i386/strlen.c
#+end_src

** GCC の基本 asm 文
<<sec:inline/basic-asm>>

*** プログラムの例: write システムコール呼び出し

続いて、
GCC のインラインアセンブラの利用法を説明します。

GCC におけるインラインアセンブラは、
GCC 固有の拡張機能です。
GCC では、
*キーワード ~asm~* を利用することで、
C 言語で書かれたソースコード中に、
アセンブリ言語のプログラムを埋め込むことができます。

まず、
GCC におけるインラインアセンブラの例を示します。
以下のプログラムを ~write.c~ という名前で保存します (図 [[fig:inline/write.c]])。

#+caption: inline/write.c
#+label: fig:inline/write.c
#+include: "code/inline/write.c" src C

*基本 asm 文 (basic asm statement)* を 5 個並べて、
Linux カーネルの ~write~ システムコールを呼び出しています。
基本 asm 文は
#+begin_src C
asm(アセンブリ言語プログラムの文字列);
#+end_src
のように記述します。
GCC におけるインラインアセンブラは *文 (statement)* です。
そのため、
C 言語において「文」が書ける場所であれば asm 文を書くことができます。
asm 文は「文」なので、
末尾には文の終わりであることを示すセミコロン (~;~) が必要です。

それでは早速、
~write.c~ をコンパイルして、
実行してみましょう。
インラインアセンブラを使用していても、
コンパイルや実行の方法は、
通常の (インラインアセンブラを使用していない) C 言語のプログラムと変わりません。
#+begin_src sh
$ gcc -o write write.c
$ ./write
Hello, World!
#+end_src
標準出力に「Hello, World!」という文字列が表示されます。

プログラムの核となるのは、
関数 ~main~ 中の 5 つの基本 asm 文です。
#+begin_src sh
  asm ("movl str, %ecx");       // ECX ← 文字列のアドレス
  asm ("movl $14, %edx");       // EDX ← 文字列の長さ
  asm ("movl $4, %eax");        // システムコール 4 番は write
  asm ("movl $1, %ebx");        // 標準出力 (1)
  asm ("int $0x80");            // システムコール呼び出し
#+end_src
レジスタ ECX、
EDX、
EAX、
EBX のそれぞれに適切な値を設定して、
INT 命令によって Linux カーネルのシステムコールを呼び出しています。

*** 生成されたアセンブリ言語プログラムの分析

GCC は、
インラインアセンブラによって記述したアセンブリ言語プログラムを、
そのまま出力します。
C 言語で書かれたプログラム ~write.c~ が、
どのようにコンパイルされるかを見てみましょう。
まず、
GCC に ~-S~ オプションを指定して、
コンパイラが出力したアセンブリ言語のプログラム ~write.s~ を見てみます。
#+begin_src sh
$ gcc -S -fno-pic write.c
#+end_src

関数 ~main~ のコンパイル結果は以下のようになっています。
#+begin_src asm
main:
.LFB0:
        .cfi_startproc
        pushl   %ebp
        .cfi_def_cfa_offset 8
        .cfi_offset 5, -8
        movl    %esp, %ebp
        .cfi_def_cfa_register 5
#APP
# 7 "write.c" 1
        movl str, %ecx
# 0 "" 2
# 8 "write.c" 1
        movl $14, %edx
# 0 "" 2
# 9 "write.c" 1
        movl $4, %eax
# 0 "" 2
# 10 "write.c" 1
        movl $1, %ebx
# 0 "" 2
# 11 "write.c" 1
        int $0x80
# 0 "" 2
#NO_APP
        movl    $0, %eax
        popl    %ebp
        .cfi_restore 5
        .cfi_def_cfa 4, 4
        ret
        .cfi_endproc
#+end_src

ここから、
GAS の疑似命令やコメントの一部を削除します。
#+begin_src asm
main:
        pushl   %ebp
        movl    %esp, %ebp
#APP
        movl str, %ecx
        movl $14, %edx
        movl $4, %eax
        movl $1, %ebx
        int $0x80
#NO_APP
        movl    $0, %eax
        popl    %ebp
        ret
#+end_src

関数 ~main~ 中に、
インラインアセンブラによって記述したアセンブリ言語プログラムがそのまま出力されていることがわかります。

言い換えれば、
GCC のインラインアセンブラは、
asm 文に記述した文字列を *そのまま GAS に渡すだけ* です。
インラインアセンブラに何を書けるか、
インラインアセンブラに何を書けないかは、
GCC が出力したアセンブリ言語プログラムを GAS が解釈できるか否かで決まります。

このため、GCC のインラインアセンブラを自在に扱うためには、
- GCC は、C 言語のプログラムをどのようなアセンブリ言語のプログラムにコ
  ンパイルするのか
- アセンブラ GAS は、どのようなアセンブリ言語を受理するか
を理解しておく必要があります。

例えば、上の例では、
#+begin_src C
  asm ("movl str, %ecx");       // ECX ← 文字列のアドレス
#+end_src
という asm 文によって、
大域変数 ~str~ に格納されている文字列へのアドレスをレジスタ ECX に格納しています。
このプログラムを書くためには、
- ~str~ というシンボルが、この箇所のアセンブリ言語から参照できること
- C 言語における ~str~ というシンボルが何を表しているか
を理解していなければ書けません。

このように、
GCC のインラインアセンブラを使用する場合は、
GCC が最終的に生成するアセンブリ言語のプログラムをイメージしながら書く、
というのがポイントです。

*** 複数命令の記述法

基本 asm 文に記述した内容は、
そのままアセンブリ言語として出力されるので、
複数のアセンブリ言語の命令をまとめて記述することも可能です。
先ほどのプログラムは以下のように記述することもできます。

#+caption: inline/write-single.c
#+label: fig:inline/write-single.c
#+include: "code/inline/write-single.c" src C

このプログラムは、
C 言語のプログラムにおいて、
連続する文字列がすべて結合されるという性質を利用しています。
例えば、
C 言語のプログラム中に、
#+begin_src asm
char *str = "あれ"
"これ" "それ";
#+end_src
のように書くと、これは
#+begin_src asm
char *str = "あれこれそれ";
#+end_src
と書いたことと同じ意味になります。

つまり上のプログラムは、
コメントの違いを除けば、
以下のプログラムとまったく同じ意味です。

#+caption: inline/write-single-joined.c
#+label: fig:inline/write-single-joined.c
#+include: "code/inline/write-single-joined.c" src C

C 言語における ~\n~ は改行文字、
~\t~ はタブを意味します。

上で述べたように、
結局のところ、
GAS の asm 文に何を書けるかは、
GAS が何を解釈するかによります。
したがって、
以下のような書き方も可能です (どれも正しく GAS によってアセンブルできます)。

#+caption: inline/write-single-1.c
#+label: fig:inline/write-single-1.c
#+include: "code/inline/write-single-1.c" src C

5 行のアセンブリ言語プログラムに相当する文字列を、
複数行にまたがる C 言語の文字列として記述しています。
末尾のバックスラッシュ (~\~) によって文字列が複数行に継続することを C コンパイラに伝えています。

また、
各行の ~\n~ は必須です。
これは、
C 言語では
#+begin_src C
char *str = "あれ\
それ";
#+end_src
は
#+begin_src C
char *str = "あれそれ";
#+end_src
と等価だからです。

なお、
各行のインデントをそろえていますが、
これは単にインラインアセンブラを記述している C 言語のプログラムを読みやすくするためです。

インデントをなくすと、
次のようになります。

#+caption: inline/write-single-2.c
#+label: fig:inline/write-single-2.c
#+include: "code/inline/write-single-2.c" src C

GAS における空白は特別な意味は持たず、
このプログラムも、
意味は先ほどのプログラムと同じです。
つまり、
GAS におけるインデントは、
単に人間にとって見やすくするための意味しか持ちません。

#+caption: inline/write-single-3.c
#+label: fig:inline/write-single-3.c
#+include: "code/inline/write-single-3.c" src C

GAS は、
対象となるコンピュータによっては 1 行に複数の命令を記述できます。
IA-32 アーキテクチャでは、
行の区切り文字はセミコロン (~;~) なので、
複数の命令をセミコロンで区切ることによって、
1 行に複数の命令を記述できます。

ただし、
GAS において 1 行に複数の命令を記述できるかどうかは対象となるコンピュータに依存します。
また、
行の区切り文字によって複数の命令を記述できる場合でも、
区切り文字に何が使えるかは対象となるコンピュータに依存します。
上の例は、
IA-32 アーキテクチャでは期待どおり動作しますが、
他のコンピュータではどうなるかわかりません (対象となるコンピュータに依存します)。
詳細については GAS のドキュメントを参照してください。

** GCC の拡張 asm 文
<<sec:inline/extended-asm>>

*** 拡張 asm 文はなぜ必要か?

GCC の基本 asm 文だけでも、
うまく工夫すればほとんどの処理を書くことができます。

基本 asm 文に記述したアセンブリ言語プログラムは、
そのままアセンブリ言語のプログラムとして出力されるので、
GCC や GAS の特性を理解していればほとんどの処理を書けてしまいます。

ただし、
基本 asm 文では、
C 言語における *局所変数* や *局所関数* をキレイに扱えません。
アセンブリ言語プログラムから参照できるのは大域的なシンボルだけです。
C 言語では、
- 大域変数
- 関数
の名前は大域的なシンボルになるため、
アセンブリ言語からこれらの変数や関数を参照することができます。
逆に言えば、
C 言語では、
- ブロック内で宣言された自動変数
- static で宣言された静的変数
- static で宣言された静的関数
の名前は局所的なシンボルになり、
アセンブリ言語からこれらの変数や関数を参照することができません。

もちろん、
大域変数を介してやりとりすればいいだけなので、
以下のように書くことは可能です。

#+caption: inline/local.c
#+label: fig:inline/local.c
#+include: "code/inline/local.c" src C

局所変数 ~str~ に格納されている文字列の内容を、
インラインアセンブラによって書き換えています。
局所変数 ~str~ はインラインアセンブラ側からは参照できないため、
いったん大域変数 ~_str~ に文字列のアドレスを格納し、
インラインアセンブラ側は大域変数 ~_str~ を通して参照しています。

これはこれでかまわないのですが、
インラインアセンブラを利用するためだけに大域変数を宣言するのはスマートではありませんし、
毎回、
局所変数から大域変数にデータ (配列へのポインタ) をコピーするのも美しくありません。

*** 拡張 asm 文の形式

GCC では、
こういった局所変数や局所関数とインラインアセンブラの橋渡しをする仕組みとして、
*拡張 asm 文 (extended asm statement)* が用意されています。
先ほどのプログラムを拡張 asm 文で書き換えてみます。

#+caption: inline/local-extended.c
#+label: fig:inline/local-extended.c
#+include: "code/inline/local-extended.c" src C

先ほどの ~local.c~ と似ていますが、
プログラムが少し簡潔になっています。
大域変数 ~_str~ が削除されています。
当然、
大域変数 ~_str~ への代入文も消えています。
asm 文にコロン (~:~) や ~"r" (str)~ のような不思議な文字列が増えています。
また、
インラインアセンブラとして記述したアセンブリ言語プログラム中に ~%0~ という、
これまた見慣れない文字列が表れています。

拡張 asm 文は以下のような形式で記述します。
#+begin_src raw
asm [volatile] ( プログラムのテンプレート
                 : 出力の制約と変数名
                 [ : 入力の制約と式
                 [ : 破壊されるレジスタなど ] ] )
#+end_src
~[]~ の中は省略可能です。
また、
C 言語は自由形式なので、
空白や改行はあってもなくても構いません。
また、
拡張 asm 文も「文」なので、
末尾にセミコロン (~;~) が必要です。

*プログラムのテンプレート* はアセンブリ言語のプログラムです。

*出力の制約と式* は、
アセンブリ言語プログラムの結果を受け取る方法を指定するためのもので、
GCC のマニュアルでは「出力オペランド (output operands)」と呼ばれています。

*入力の制約と式* は、
アセンブリ言語プログラムに対して、
C 言語中の式を渡す方法を指定するためのもので、
GCC のマニュアルでは「入力オペランド (input operands)」と呼ばれています。

そして最後の *破壊されるレジスタなど* は、
アセンブリ言語プログラムによって破壊されるレジスタなどの情報を GCC に伝えるためのものです。
GCC のマニュアルでは clobbers (英語の clobber は「破壊する」という意味の動詞) と呼ばれています。

拡張 asm 文はそれなりに複雑ですし、
「プログラムのテンプレート」、
「出力の制約と変数名」、
「入力の制約と式」等を特殊な記号で表記するので、
一見しても何のことかわからないかもしれません。
しかも、
拡張 asm 文はかなり高機能なので、
「出力の制約と変数名」や「入力の制約と式」に指定できる特殊な記号もたくさんあります。

ここでは拡張 asm 文の機能を網羅的に説明するのではなく、
典型的な拡張 asm 文の用法に限定して説明します。

*** プログラムの例: 汎用レジスタを介した出力

まず、
比較的簡単な拡張 asm 文の例から見てみましょう。

#+caption: inline/extended-out.c
#+label: fig:inline/extended-out.c
#+include: "code/inline/extended-out.c" src C

関数 ~main~ 中に 3 つの拡張 asm 文が並んでいます。
拡張 asm 文の利用法が少しずつ異なりますが、
どれも局所変数 ~i~ に値を格納するインラインアセンブラの例です。

最初の拡張 asm 文が最も基本的なパターンです。
#+begin_src C
  int i;
  asm ("movl $123, %0"          // レジスタ %0 に 123 を格納する
       : "=r" (i));             // i の値をレジスタ %0 経由で受け取る
#+end_src
これにより、
変数 ~i~ に 123 が格納されます。
C 言語における自動変数は初期化されないので、
変数 ~i~ は宣言しただけでは初期化されず値は不定です。
上記のインラインアセンブラによって、
変数 ~i~ の値が 123 になります。

上の例では ~"movl $123, %0"~ が「プログラムのテンプレート」です。
プログラムのテンプレートは、
アセンブリ言語プログラムのテンプレートです。
アセンブリ言語プログラムの記述法は、
基本 asm 文とほとんど同じです。
ただし、
拡張 asm 文では、
アセンブリ言語プログラムそのものではなく、
アセンブリ言語プログラムの *テンプレート (template)* を与えます。
英語の template は「ひな型」という意味です。

テンプレート中の「~%~ 数字」等の文字列が、
GCC によって、
自動的にレジスタ名やメモリアドレスに置換されます。
上の例では、
#+begin_src asm
	movl $123, %0
#+end_src
というプログラムのテンプレートは、
例えば、最終的に
#+begin_src asm
	movl $123, %eax
#+end_src
のように置換されます。
ここではレジスタ EAX に置換される例を示しましたが、
実際にどのレジスタに置換されるかは事前にはわかりません (GCC がレジスタの空き状況等に応じて自動的に割り当てます)。

上の例では、
「出力の制約と変数名」は、
コロン (~:~) の後にある「~"=r" (i)~」です。
「入力の制約と式」および「破壊されるレジスタなど」は指定されていません (省略されています)。

「出力の制約と変数名」には、
インラインアセンブラの実行結果を、
どの変数が、
どのように受け取るかを指定します。
「出力の制約と変数名」には、
制約と変数名のペアを、
カンマで区切って複数指定することができます。

例えば、
「~"=r" (i)~」の場合、
前半の「~"=r"~ 」が制約 (constraint) を、
後半の「~(i)~」は変数名を意味します。

前半の制約は、
C 言語の文字列として指定します。
アセンブリ言語プログラムからの結果の受け取り方を、
「これこれの方法でないとダメ」と指定する役割であることから「制約」と呼ばれます。
制約が「~=r~」の場合、
1 文字目のイコール (~=~) は変数にすでに格納されていた値が上書きされることを意味します。
2 文字目の ~r~ はいずれかの汎用レジスタ経由で値を得ることを意味します。

後半の変数名には、
「~(i)~」のように、
結果を受け取る変数名を括弧で囲みます。
「~(i)~」の場合、
変数 ~i~ が結果を受け取ることを意味しています。

もう一度、
元の拡張 asm 文を見てみましょう。
#+begin_src C
  int i;
  asm ("movl $123, %0"          // レジスタ %0 に 123 を格納する
       : "=r" (i));             // i の値をレジスタ %0 経由で受け取る
#+end_src
「出力の制約と変数名」で、
「変数 ~i~ がいずれかの汎用レジスタ経由で値を受け取る」ことを指定しています。
GCC は、
「出力の制約と変数名」や「入力の制約や式」に指定されたレジスタやメモリアドレスを、
順番に ~%0~、
~%1~ ……に割り当てます。
したがって、
上の例では、
~%0~ には、
変数 ~i~ に値を返す汎用レジスタの名前が入ります。

このように、
拡張 asm 文では、
生成されるアセンブリ言語にある程度の幅を持たせています。
拡張 asm 文の「出力の制約と変数名」には、
「こうでなければならない」という「制約」だけを指定しておいて、
実際にどのレジスタを使うのか、
実際にどのメモリアドレスを使うのかは GCC に裁量を持たせています。
これにより、
GCC によるコンパイル時の最適化を可能にしています。

その分、
実際のどのようなアセンブリ言語のプログラムが生成されるのかはプログラマには見えづらくなっています。
上の拡張 asm 文をコンパイルすると、
筆者の環境では、
GCC は以下のようなアセンブリ言語プログラムを生成していました。
#+begin_src asm
        movl	$123, %eax
        movl	%eax, -12(%ebp)
#+end_src
~-12(%ebp)~ が、
変数 ~i~ が格納されているスタック上のメモリアドレスに対応します。
今の場合は、
たまたまレジスタ EAX が割り当てられていました。

*** プログラムの例: 特定のレジスタを介した出力

拡張 asm 文の例をもう少し見てみましょう。
#+begin_src asm
  asm ("movl $456, %%eax"       //レジスタ EAX に 456 を格納する (% は %% と表記)
       : "=a" (i));             // i の値をレジスタ EAX 経由で受け取る
  printf ("i=%d\n", i);
#+end_src
先ほどの例とほぼ同じですが、
「出力の制約と変数名」として「~"=a" (i)~」を指定しています。
前半の制約が「~=r~」から「~=a~」に変わっています。
また、
プログラムのテンプレート中の ~%0~ が ~%%eax~ に変わっています。

ここでは、
「汎用レジスタなら何でもよい」ことを意味する ~r~ ではなく、
「必ずレジスタ EAX を使う」ことを意味する ~a~ を指定しています。
このため、
プログラムのテンプレートでも、
レジスタ EAX を使うことがわかっているので、
MOV 命令の宛先オペランドにレジスタ EAX を指定しています。
ただし、
拡張 asm 文ではパーセント記号 (~%~) が特別な意味を持つため、
~%eax~ を表記する場合には ~%%eax~ のように ~%~ を重ねて表記します。

*** プログラムの例: メモリのアドレスを介した出力

もう 1 つ、
似た例を見てみましょう。
#+begin_src asm
  asm ("movl $789, %0"          // アドレス %0 に 789 を格納する
       : "=m" (i));             // i の値をアドレス %0 経由で受け取る
  printf ("i=%d\n", i);
#+end_src
これも先ほどの例とほぼ同じですが、
「出力の制約と変数名」として「~"=m" (i)~」を指定しています。
前半の制約として ~=m~ を指定しています。
制約 ~m~ は、
「(汎用レジスタではなく) メモリのアドレスを経由して受け取る」ことを意味します。

上の拡張 asm 文をコンパイルすると、
GCC は以下のようなアセンブリ言語プログラムを生成していました。
#+begin_src asm
        movl $789, -12(%ebp)
#+end_src
MOV 命令の宛先オペランドに記述していた ~%0~ が、
~-12(%ebp)~ という間接メモリ参照に置き換えられました。
先ほどと同じように、
~-12(%ebp)~ は、
変数 ~i~ が格納されているスタック上のメモリアドレスに対応します。

*** プログラムの例: 入出力の両方を使用した場合

拡張 asm 文で、
アセンブリ言語のプログラムから結果を受け取るだけであれば、
上で紹介したような書き方だけで記述できます。
しかし、
アセンブリ言語のプログラムに、
C 言語で書かれたプログラムから値を渡す場合にはもう少し記述が必要です。
「出力の制約と変数名」に加えて、
「入力の制約と式」もあわせて指定する必要があります。

アセンブリ言語プログラムとの入出力を行う例を見てみましょう。

まず、
局所変数 ~i~ の値に 27 を加算するプログラムです。
#+begin_src asm
  i = 123;
  asm ("addl $27, %0"           // レジスタ %0 に 27 を加算する
       : "=r" (i)               // i の値をレジスタ %0 経由で受け取る
       : "0" (i));              // レジスタ %0 の値を i の値で初期化する
  printf ("i=%d\n", i);
#+end_src
このプログラムを実行すると、
変数 ~i~ の値 27 が加算されて 150 になります。

先ほどの例と似ていますが、
「出力の制約と変数名」のあとに、
「入力の制約と式」として「~"0" (i)~」を指定しています。
これにより、
変数 ~i~ の「値」がアセンブリ言語プログラムに渡されます。

前半の「~"0"~」が制約を、
後半の「~(i)~」は入力する式を指定しています。
制約 ~0~ は、
「『出力の制約と変数名』ですでに指定した ~%0~ と同じ」であることを意味しています。
つまり、
「入力の制約と式」が「~"0" (i)~」なので、
- 変数 ~i~ の「値」をアセンブリ言語プログラムに入力すること
- 変数 ~i~ の値は ~%0~ (今の場合、汎用レジスタのいずれか) で渡すこと
を指定しています。

他のパターンも見てみましょう。
アセンブリ言語プログラムとの入出力に、
「汎用レジスタのいずれか」ではなく、
明示的にレジスタ ECX を指定した例です。
#+begin_src asm
  i = 123;
  asm ("subl $23, %%ecx"        //レジスタ ECX から 23 を減算する (% は %% と表記)
       : "=c" (i)               // i の値をレジスタ ECX 経由で受け取る
       : "0" (i));              //レジスタ ECX の値を i の値で初期化する
  printf ("i=%d\n", i);
#+end_src
このプログラムを実行すると、
変数 ~i~ の値が 100 になります。
「出力の制約と変数名」が「~=c~」なので、
変数 ~i~ の値をレジスタ ECX を介して出力します。
また「入力の制約と式」が「~"0" (i)~」なので、
変数 ~i~ の値をレジスタ ECX を介して入力します。

入力および出力には、それぞれ複数の変数名や式を指定することもできます。
#+begin_src asm
  i = 123;
  j = 456;
  asm ("inc %0\n\t"             // レジスタ %0 を +1 する
       "dec %1"                 // レジスタ %1 を -1 する
       : "=r" (i), "=r" (j)     // i, j の値をレジスタ %0, %1 経由で受け取る
       : "0" (i), "1" (j));     // レジスタ %0, %1 の値を i, j の値で初期化する
  printf ("i=%d, j=%d\n", i, j);
#+end_src
このプログラムでは、
変数 ~i~ の値を 1 だけ増加し、
変数 ~j~ の値を 1 だけ減少させます。
「出力の制約と変数名」が「~"=r" (i)~」と「~"=r" (j)~」なので、
変数 ~i~ および変数 ~j~ の値を、
どちらも汎用レジスタを介して出力します。
また「入力の制約と式」が「~"0" (i)~」と「~"1" (j)~」なので、
変数 ~i~ および変数 ~j~ の値を ~%0~ および ~%1~ を介して入力します。

拡張 asm 文のおおよそのパターンがわかってきたと思います。
さらにあと 2 つほど例を見てみましょう。
#+begin_src asm
  i = 123;
  j = 456;
  asm ("inc %%eax\n\t"          //レジスタ EAX を +1 する
       "dec %%edx"              //レジスタ EDX を -1 する
       : "=a" (i), "=d" (j)     // i, j の値を EAX、レジスタ EDX 経由で受け取る
       : "0" (i), "1" (j));     // レジスタ EAX、EDX の値を i, j の値で初期化する
  printf ("i=%d, j=%d\n", i, j);
#+end_src
上の例とほとんど同じですが、
入出力に使用するレジスタを、
レジスタ EAX および EDX に指定しています。

#+begin_src asm
  char str[4] = "gcc";
  asm ("movb $'G, %0"           // アドレス %0 に 'G' を書き込む
       :                        // 出力される変数はなし
       :"m" (str));             // %0 に変数 str のアドレスを与える
  printf ("%s\n", str);
#+end_src
このプログラムを実行すると ~Gcc~ と表示されます。
局所変数 ~str~ の 1 文字目を書き換えるプログラムです。
「出力の制約と変数名」は空です。
アセンブリ言語プログラムからの結果は受け取りません。
「入力の制約と式」が「~"m" (str)~」なので、
変数 ~str~ の値 (今の場合、
~char~ への配列の先頭アドレス) をメモリアドレスを介して入力します。

# https://gcc.gnu.org/wiki/ConvertBasicAsmToExtended

** インラインアセンブラの実例
<<sec:inline/example>>

ここまでは GCC のインラインアセンブラの基本的な使い方を説明してきました。
それでは、
ここからはインラインアセンブラの実例をいくつか見てみましょう。

*** CPUID の取得

まずは、
CPUID ([[sec:gas/example]] 節参照) を取得するプログラムです。
ファイル名は ~inline-cpuid.c~ です (図 [[fig:inline/inline-cpuid.c]])。

#+caption: inline/inline-cpuid.c
#+label: fig:inline/inline-cpuid.c
#+include: "code/inline/inline-cpuid.c" src C

GCC の拡張 asm 文を使用して CPUID 命令を実行しています。

このプログラムを実行すると、
レジスタ EAX を 1 に設定し、
CPUID 命令を実行します。
レジスタ EAX、
EBX、
ECX、
EDX に返された値をそれぞれ符号なし整数として表示します。
実行結果の例を示します。
#+begin_src sh
$ gcc -o inline-cpuid inline-cpuid.c
$ ./inline-cpuid
526058 67584 3740934667 395049919
#+end_src
現在は、
CPUID 命令によって取得した生の値をそのまま表示しているだけですが、
少し C 言語でプログラムを書けば、
取得した値の意味を解釈して表示させることもできます。

このプログラムにおける拡張 asm 文の「出力の制約と変数名」には、
レジスタ EAX、
EBX、
ECX、
EDX と、
変数 ~eax~、
~ebx~、
~ecx~、
~edx~ をそれぞれ指定しています。
CPUID 命令の実行によってレジスタに格納される情報をすべて取得しています。

「入力の制約と式」にはレジスタ EAX を指定し、
レジスタ EAX の初期値を 1 に設定しています。
「入力の制約と式」の「式」の部分は、
式であれば何でもかまわない (変数である必要はない) ので、
ここでは定数の 1 を指定しています。
これにより、
インラインアセンブラのプログラムの実行の前に、
レジスタ EAX が 1 で初期化された状態になります。

GCC のインラインアセンブラのおかげで、
CPU 固有の機械語命令である CPUID 命令を簡単に呼び出せています。
アセンブリ言語のプログラムが、
まるで C 言語のプログラムの一部であるかのように手軽に記述できていることがわかります。

ただし、
やはり GCC の拡張 asm 文は読みづらいと思います。
#+begin_src C
  : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx) : "a" (1))
#+end_src
といった、
「おまじない」のような不思議な文字が並んでいるので、
お世辞にも可読性が高いとは言えません。
GCC のインラインアセンブラに習熟すれば手軽に、
簡潔に書けますが、
そうでなければ、
どんな処理を行っているのかの想像も難しいといえます。
よくも悪くも、
GCC のインラインアセンブラは「素人お断り」の世界になってしまっています。

*** CPU の TSC (Time Stamp Counter) 取得

次は、
[[sec:inline/call-from-c]] 節でも紹介した、
CPU の *TSC (Time Stamp Counter)* を取得するプログラムです。

#+caption: inline/inline-rdtsc.c
#+label: fig:inline/inline-rdtsc.c
#+include: "code/inline/inline-rdtsc.c" src C

このプログラムを実行すると、
RDTSCP 命令を実行します。
これにより、
RDTSCP 命令を実行した CPU コアの現在の TSC が、
レジスタ EDX とレジスタ EAX に格納されます。
TSC の上位 32 ビットがレジスタ EDX に、
TSC の下位 32 ビットがレジスタ EAX に格納されます。
このプログラムでは、
取得した TSC の上位 32 ビット・下位 32 ビットの値を符号なし整数として表示しています。

実行結果の例を示します。
#+begin_src sh
$ gcc -o inline-rdtsc inline-rdtsc.c
$ ./inline-rdtsc
89843 2079578975
#+end_src

先ほどの CPUID 命令と同じように、
RDTSCP 命令も、
単純に命令を実行すれば結果がレジスタに得られます。
レジスタに格納された情報を取得するだけです。

「出力の制約と変数名」にはレジスタ EAX とレジスタ EDX を指定し、
変数 ~low~ および変数 ~high~ にそれぞれの結果を取得しています。
RDTSCP 命令は何も入力を取らないので、
「入力の制約と式」は空です。
ただし、
「破壊されるレジスタなど」にレジスタ ECX を指定しています。
これは RDTSCP 命令はレジスタ EAX、
レジスタ EDX だけでなく、
レジスタ ECX にも値を返すからです。

*** strlen 関数の実装

最後はインラインアセンブラによる関数 ~strlen~ の実装です。
[[sec:inline/call-from-c]] 節で紹介した、
アセンブリ言語で実装した関数 ~strlen~ のプログラムをインラインアセンブラで書き直しました。

#+caption: inline/inline-strlen.c
#+label: fig:inline/inline-strlen.c
#+include: "code/inline/inline-strlen.c" src C

このくらいの規模になると、
インラインアセンブラのほうがかえって複雑で、
読みづらく感じます。
C 言語とアセンブリ言語が「ちゃんぽん」になっていて、
プログラムを読む場合もかえって混乱しそうです。

C 言語で書かれたプログラム ~strlen.c~ とアセンブリ言語で書かれたプログラム ~strlen_asm.s~ のうち、
アセンブリ言語による素直な関数 ~strlen~ の実装のみを含めています。

プログラム全体のロジックは変わっていません。
関数 ~rdtsc~ も、
関数 ~strlen_asm~ も、
どちらも GCC のインラインアセンブラで記述しています。

RDTSCP 命令を呼び出している部分は、
先ほどの ~inline-rdtsc.c~ とまったく同じです。

関数 ~strlen_asm~ の本体は以下のようになっています。
#+begin_src asm
  asm ("movl $0, %%eax\n\t"     // EAX ← 文字列長
       "movb $0, %%cl\n\t"      // CL ← 終端文字
       "L1: cmpb %%cl, (%%edx)\n\t"     // (EDX) が終端文字か?
       "je L2\n\t"              // Yes なら L2 にジャンプ
       "inc %%eax\n\t"          // 文字列長を + 1
       "inc %%edx\n\t"          // str のアドレスを + 1
       "jmp L1\n\t"             // L1 に戻る
       "L2:"
       : "=a" (l)               // 出力:レジスタ EAX  → l
       : "d" (str)              // 入力:レジスタ EDX  ← str
       : "ecx");                // レジスタ ECX を破壊する
#+end_src
関数 ~strlen~ は文字列 ~str~ の先頭からヌル文字を探索することで文字列を求め、
求めた文字列長を返します。
関数 ~strlen_asm~ は、
そのほとんどがアセンブリ言語のプログラムであり、
インラインアセンブラによる C 言語とアセンブリ言語の橋渡しがそれほど役立っていません。
ただし、
GCC の拡張 asm 文を使っているので、
関数の仮引数である ~str~ (局所変数でもあります) をアセンブリ言語プログラムに渡すことができています。

「出力の制約と変数名」には ~"=a" (l)~ を指定し、
レジスタ EAX に格納されている文字列長を変数 ~l~ に読み込んでいます。
また、
「入力の制約と式」には ~"d" (str)~ を指定し、
局所変数 ~str~ の値をレジスタ EDX に渡しています。
さらに、
「破壊されるレジスタなど」にレジスタ ECX を指定しています。
これは、
本プログラムでは、
終端文字の格納にレジスタ EL (レジスタ ECX の下位 8 ビット) を使用している (破壊している) からです。

** 章末問題
<<sec:inline/quiz>>

1. プログラム ~inline.c~ (図 [[fig:inline/inline.c]]) 中の asm 文を変更し、
   変数 ~i~ の値を 10 倍にするように書き換えよ。

   #+begin_answer
   プログラムの例: ~inline-mul.c~ (図 [[fig:inline/ex/inline-mul.c]])
   #+caption: inline/ex/inline-mul.c
   #+label: fig:inline/ex/inline-mul.c
   #+include: "code/inline/ex/inline-mul.c" src raw
   #+end_answer

2. 使用しているコンピュータの CPU の動作周波数を調べよ。CPU の最大動作
   周波数ではなく、現在の動作周波数を調べること。

   #+begin_answer
   いくつかの方法があるが、GNU/Linux の場合、~/proc/cpuinfo~ を見れば
   CPU のさまざまな情報が取得できる。
#+begin_src sh
$ grep 'cpu MHz' /proc/cpuinfo 
cpu MHz         : 1276.207
cpu MHz         : 1012.482
cpu MHz         : 995.587
cpu MHz         : 1570.745
cpu MHz         : 952.005
cpu MHz         : 1065.684
cpu MHz         : 1162.213
cpu MHz         : 924.501
#+end_src
   上の例では、8 コアのそれぞれの動作周波数が表示されている。
   #+end_answer

3. ~int~ 型の変数 ~i~ の値を 1 だけ増加させるプログラムをインラインア
   センブラで記述せよ。

   #+begin_answer
   プログラムの例: ~inc.c~ (図 [[fig:inline/ex/inc.c]])
   #+caption: inline/ex/inc.c
   #+label: fig:inline/ex/inc.c
   #+include: "code/inline/ex/inc.c" src C
   #+end_answer

4. ~int~ 型の変数 ~i~ および ~j~ の値を交換するプログラムをインライン
   アセンブラで記述せよ。

   #+begin_answer
   プログラムの例: ~swap.c~ (図 [[fig:inline/ex/swap.c]])
   #+caption: inline/ex/swap.c
   #+label: fig:inline/ex/swap.c
   #+include: "code/inline/ex/swap.c" src C
   #+end_answer
